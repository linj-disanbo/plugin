// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zksync1.proto

package types // import "github.com/33cn/plugin/plugin/dapp/zkspot/types"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/33cn/plugin/plugin/dapp/zksync/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ZksyncAction1 struct {
	Ty int32 `protobuf:"varint,1,opt,name=ty,proto3" json:"ty,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*ZksyncAction1_Withdraw
	//	*ZksyncAction1_ContractToTree
	//	*ZksyncAction1_TreeToContract
	//	*ZksyncAction1_Transfer
	//	*ZksyncAction1_TransferToNew
	//	*ZksyncAction1_ForceExit
	//	*ZksyncAction1_SetPubKey
	//	*ZksyncAction1_FullExit
	//	*ZksyncAction1_Swap
	//	*ZksyncAction1_SetVerifyKey
	//	*ZksyncAction1_CommitProof
	//	*ZksyncAction1_SetVerifier
	//	*ZksyncAction1_Deposit
	//	*ZksyncAction1_LimitOrder
	//	*ZksyncAction1_MarketOrder
	//	*ZksyncAction1_RevokeOrder
	//	*ZksyncAction1_ExchangeBind
	//	*ZksyncAction1_EntrustOrder
	//	*ZksyncAction1_EntrustRevokeOrder
	Value                isZksyncAction1_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ZksyncAction1) Reset()         { *m = ZksyncAction1{} }
func (m *ZksyncAction1) String() string { return proto.CompactTextString(m) }
func (*ZksyncAction1) ProtoMessage()    {}
func (*ZksyncAction1) Descriptor() ([]byte, []int) {
	return fileDescriptor_zksync1_6a76009bd3c90658, []int{0}
}
func (m *ZksyncAction1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZksyncAction1.Unmarshal(m, b)
}
func (m *ZksyncAction1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZksyncAction1.Marshal(b, m, deterministic)
}
func (dst *ZksyncAction1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZksyncAction1.Merge(dst, src)
}
func (m *ZksyncAction1) XXX_Size() int {
	return xxx_messageInfo_ZksyncAction1.Size(m)
}
func (m *ZksyncAction1) XXX_DiscardUnknown() {
	xxx_messageInfo_ZksyncAction1.DiscardUnknown(m)
}

var xxx_messageInfo_ZksyncAction1 proto.InternalMessageInfo

func (m *ZksyncAction1) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

type isZksyncAction1_Value interface {
	isZksyncAction1_Value()
}

type ZksyncAction1_Withdraw struct {
	Withdraw *types.ZkWithdraw `protobuf:"bytes,2,opt,name=withdraw,proto3,oneof"`
}

type ZksyncAction1_ContractToTree struct {
	ContractToTree *types.ZkContractToTree `protobuf:"bytes,3,opt,name=contractToTree,proto3,oneof"`
}

type ZksyncAction1_TreeToContract struct {
	TreeToContract *types.ZkTreeToContract `protobuf:"bytes,4,opt,name=treeToContract,proto3,oneof"`
}

type ZksyncAction1_Transfer struct {
	Transfer *types.ZkTransfer `protobuf:"bytes,5,opt,name=transfer,proto3,oneof"`
}

type ZksyncAction1_TransferToNew struct {
	TransferToNew *types.ZkTransferToNew `protobuf:"bytes,6,opt,name=transferToNew,proto3,oneof"`
}

type ZksyncAction1_ForceExit struct {
	ForceExit *types.ZkForceExit `protobuf:"bytes,7,opt,name=forceExit,proto3,oneof"`
}

type ZksyncAction1_SetPubKey struct {
	SetPubKey *types.ZkSetPubKey `protobuf:"bytes,8,opt,name=setPubKey,proto3,oneof"`
}

type ZksyncAction1_FullExit struct {
	FullExit *types.ZkFullExit `protobuf:"bytes,9,opt,name=fullExit,proto3,oneof"`
}

type ZksyncAction1_Swap struct {
	Swap *types.ZkSwap `protobuf:"bytes,10,opt,name=swap,proto3,oneof"`
}

type ZksyncAction1_SetVerifyKey struct {
	SetVerifyKey *types.ZkVerifyKey `protobuf:"bytes,11,opt,name=setVerifyKey,proto3,oneof"`
}

type ZksyncAction1_CommitProof struct {
	CommitProof *types.ZkCommitProof `protobuf:"bytes,12,opt,name=commitProof,proto3,oneof"`
}

type ZksyncAction1_SetVerifier struct {
	SetVerifier *types.ZkVerifier `protobuf:"bytes,13,opt,name=setVerifier,proto3,oneof"`
}

type ZksyncAction1_Deposit struct {
	Deposit *types.ZkDeposit `protobuf:"bytes,14,opt,name=deposit,proto3,oneof"`
}

type ZksyncAction1_LimitOrder struct {
	LimitOrder *SpotLimitOrder `protobuf:"bytes,101,opt,name=limitOrder,proto3,oneof"`
}

type ZksyncAction1_MarketOrder struct {
	MarketOrder *SpotMarketOrder `protobuf:"bytes,102,opt,name=marketOrder,proto3,oneof"`
}

type ZksyncAction1_RevokeOrder struct {
	RevokeOrder *SpotRevokeOrder `protobuf:"bytes,103,opt,name=revokeOrder,proto3,oneof"`
}

type ZksyncAction1_ExchangeBind struct {
	ExchangeBind *SpotExchangeBind `protobuf:"bytes,104,opt,name=exchangeBind,proto3,oneof"`
}

type ZksyncAction1_EntrustOrder struct {
	EntrustOrder *SpotEntrustOrder `protobuf:"bytes,105,opt,name=entrustOrder,proto3,oneof"`
}

type ZksyncAction1_EntrustRevokeOrder struct {
	EntrustRevokeOrder *SpotEntrustRevokeOrder `protobuf:"bytes,107,opt,name=entrustRevokeOrder,proto3,oneof"`
}

func (*ZksyncAction1_Withdraw) isZksyncAction1_Value() {}

func (*ZksyncAction1_ContractToTree) isZksyncAction1_Value() {}

func (*ZksyncAction1_TreeToContract) isZksyncAction1_Value() {}

func (*ZksyncAction1_Transfer) isZksyncAction1_Value() {}

func (*ZksyncAction1_TransferToNew) isZksyncAction1_Value() {}

func (*ZksyncAction1_ForceExit) isZksyncAction1_Value() {}

func (*ZksyncAction1_SetPubKey) isZksyncAction1_Value() {}

func (*ZksyncAction1_FullExit) isZksyncAction1_Value() {}

func (*ZksyncAction1_Swap) isZksyncAction1_Value() {}

func (*ZksyncAction1_SetVerifyKey) isZksyncAction1_Value() {}

func (*ZksyncAction1_CommitProof) isZksyncAction1_Value() {}

func (*ZksyncAction1_SetVerifier) isZksyncAction1_Value() {}

func (*ZksyncAction1_Deposit) isZksyncAction1_Value() {}

func (*ZksyncAction1_LimitOrder) isZksyncAction1_Value() {}

func (*ZksyncAction1_MarketOrder) isZksyncAction1_Value() {}

func (*ZksyncAction1_RevokeOrder) isZksyncAction1_Value() {}

func (*ZksyncAction1_ExchangeBind) isZksyncAction1_Value() {}

func (*ZksyncAction1_EntrustOrder) isZksyncAction1_Value() {}

func (*ZksyncAction1_EntrustRevokeOrder) isZksyncAction1_Value() {}

func (m *ZksyncAction1) GetValue() isZksyncAction1_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ZksyncAction1) GetWithdraw() *types.ZkWithdraw {
	if x, ok := m.GetValue().(*ZksyncAction1_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (m *ZksyncAction1) GetContractToTree() *types.ZkContractToTree {
	if x, ok := m.GetValue().(*ZksyncAction1_ContractToTree); ok {
		return x.ContractToTree
	}
	return nil
}

func (m *ZksyncAction1) GetTreeToContract() *types.ZkTreeToContract {
	if x, ok := m.GetValue().(*ZksyncAction1_TreeToContract); ok {
		return x.TreeToContract
	}
	return nil
}

func (m *ZksyncAction1) GetTransfer() *types.ZkTransfer {
	if x, ok := m.GetValue().(*ZksyncAction1_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *ZksyncAction1) GetTransferToNew() *types.ZkTransferToNew {
	if x, ok := m.GetValue().(*ZksyncAction1_TransferToNew); ok {
		return x.TransferToNew
	}
	return nil
}

func (m *ZksyncAction1) GetForceExit() *types.ZkForceExit {
	if x, ok := m.GetValue().(*ZksyncAction1_ForceExit); ok {
		return x.ForceExit
	}
	return nil
}

func (m *ZksyncAction1) GetSetPubKey() *types.ZkSetPubKey {
	if x, ok := m.GetValue().(*ZksyncAction1_SetPubKey); ok {
		return x.SetPubKey
	}
	return nil
}

func (m *ZksyncAction1) GetFullExit() *types.ZkFullExit {
	if x, ok := m.GetValue().(*ZksyncAction1_FullExit); ok {
		return x.FullExit
	}
	return nil
}

func (m *ZksyncAction1) GetSwap() *types.ZkSwap {
	if x, ok := m.GetValue().(*ZksyncAction1_Swap); ok {
		return x.Swap
	}
	return nil
}

func (m *ZksyncAction1) GetSetVerifyKey() *types.ZkVerifyKey {
	if x, ok := m.GetValue().(*ZksyncAction1_SetVerifyKey); ok {
		return x.SetVerifyKey
	}
	return nil
}

func (m *ZksyncAction1) GetCommitProof() *types.ZkCommitProof {
	if x, ok := m.GetValue().(*ZksyncAction1_CommitProof); ok {
		return x.CommitProof
	}
	return nil
}

func (m *ZksyncAction1) GetSetVerifier() *types.ZkVerifier {
	if x, ok := m.GetValue().(*ZksyncAction1_SetVerifier); ok {
		return x.SetVerifier
	}
	return nil
}

func (m *ZksyncAction1) GetDeposit() *types.ZkDeposit {
	if x, ok := m.GetValue().(*ZksyncAction1_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (m *ZksyncAction1) GetLimitOrder() *SpotLimitOrder {
	if x, ok := m.GetValue().(*ZksyncAction1_LimitOrder); ok {
		return x.LimitOrder
	}
	return nil
}

func (m *ZksyncAction1) GetMarketOrder() *SpotMarketOrder {
	if x, ok := m.GetValue().(*ZksyncAction1_MarketOrder); ok {
		return x.MarketOrder
	}
	return nil
}

func (m *ZksyncAction1) GetRevokeOrder() *SpotRevokeOrder {
	if x, ok := m.GetValue().(*ZksyncAction1_RevokeOrder); ok {
		return x.RevokeOrder
	}
	return nil
}

func (m *ZksyncAction1) GetExchangeBind() *SpotExchangeBind {
	if x, ok := m.GetValue().(*ZksyncAction1_ExchangeBind); ok {
		return x.ExchangeBind
	}
	return nil
}

func (m *ZksyncAction1) GetEntrustOrder() *SpotEntrustOrder {
	if x, ok := m.GetValue().(*ZksyncAction1_EntrustOrder); ok {
		return x.EntrustOrder
	}
	return nil
}

func (m *ZksyncAction1) GetEntrustRevokeOrder() *SpotEntrustRevokeOrder {
	if x, ok := m.GetValue().(*ZksyncAction1_EntrustRevokeOrder); ok {
		return x.EntrustRevokeOrder
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ZksyncAction1) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ZksyncAction1_OneofMarshaler, _ZksyncAction1_OneofUnmarshaler, _ZksyncAction1_OneofSizer, []interface{}{
		(*ZksyncAction1_Withdraw)(nil),
		(*ZksyncAction1_ContractToTree)(nil),
		(*ZksyncAction1_TreeToContract)(nil),
		(*ZksyncAction1_Transfer)(nil),
		(*ZksyncAction1_TransferToNew)(nil),
		(*ZksyncAction1_ForceExit)(nil),
		(*ZksyncAction1_SetPubKey)(nil),
		(*ZksyncAction1_FullExit)(nil),
		(*ZksyncAction1_Swap)(nil),
		(*ZksyncAction1_SetVerifyKey)(nil),
		(*ZksyncAction1_CommitProof)(nil),
		(*ZksyncAction1_SetVerifier)(nil),
		(*ZksyncAction1_Deposit)(nil),
		(*ZksyncAction1_LimitOrder)(nil),
		(*ZksyncAction1_MarketOrder)(nil),
		(*ZksyncAction1_RevokeOrder)(nil),
		(*ZksyncAction1_ExchangeBind)(nil),
		(*ZksyncAction1_EntrustOrder)(nil),
		(*ZksyncAction1_EntrustRevokeOrder)(nil),
	}
}

func _ZksyncAction1_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ZksyncAction1)
	// value
	switch x := m.Value.(type) {
	case *ZksyncAction1_Withdraw:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Withdraw); err != nil {
			return err
		}
	case *ZksyncAction1_ContractToTree:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ContractToTree); err != nil {
			return err
		}
	case *ZksyncAction1_TreeToContract:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TreeToContract); err != nil {
			return err
		}
	case *ZksyncAction1_Transfer:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transfer); err != nil {
			return err
		}
	case *ZksyncAction1_TransferToNew:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransferToNew); err != nil {
			return err
		}
	case *ZksyncAction1_ForceExit:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForceExit); err != nil {
			return err
		}
	case *ZksyncAction1_SetPubKey:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetPubKey); err != nil {
			return err
		}
	case *ZksyncAction1_FullExit:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FullExit); err != nil {
			return err
		}
	case *ZksyncAction1_Swap:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Swap); err != nil {
			return err
		}
	case *ZksyncAction1_SetVerifyKey:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetVerifyKey); err != nil {
			return err
		}
	case *ZksyncAction1_CommitProof:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommitProof); err != nil {
			return err
		}
	case *ZksyncAction1_SetVerifier:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetVerifier); err != nil {
			return err
		}
	case *ZksyncAction1_Deposit:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Deposit); err != nil {
			return err
		}
	case *ZksyncAction1_LimitOrder:
		b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LimitOrder); err != nil {
			return err
		}
	case *ZksyncAction1_MarketOrder:
		b.EncodeVarint(102<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MarketOrder); err != nil {
			return err
		}
	case *ZksyncAction1_RevokeOrder:
		b.EncodeVarint(103<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RevokeOrder); err != nil {
			return err
		}
	case *ZksyncAction1_ExchangeBind:
		b.EncodeVarint(104<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExchangeBind); err != nil {
			return err
		}
	case *ZksyncAction1_EntrustOrder:
		b.EncodeVarint(105<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EntrustOrder); err != nil {
			return err
		}
	case *ZksyncAction1_EntrustRevokeOrder:
		b.EncodeVarint(107<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EntrustRevokeOrder); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ZksyncAction1.Value has unexpected type %T", x)
	}
	return nil
}

func _ZksyncAction1_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ZksyncAction1)
	switch tag {
	case 2: // value.withdraw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkWithdraw)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_Withdraw{msg}
		return true, err
	case 3: // value.contractToTree
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkContractToTree)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_ContractToTree{msg}
		return true, err
	case 4: // value.treeToContract
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkTreeToContract)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_TreeToContract{msg}
		return true, err
	case 5: // value.transfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkTransfer)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_Transfer{msg}
		return true, err
	case 6: // value.transferToNew
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkTransferToNew)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_TransferToNew{msg}
		return true, err
	case 7: // value.forceExit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkForceExit)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_ForceExit{msg}
		return true, err
	case 8: // value.setPubKey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkSetPubKey)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_SetPubKey{msg}
		return true, err
	case 9: // value.fullExit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkFullExit)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_FullExit{msg}
		return true, err
	case 10: // value.swap
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkSwap)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_Swap{msg}
		return true, err
	case 11: // value.setVerifyKey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkVerifyKey)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_SetVerifyKey{msg}
		return true, err
	case 12: // value.commitProof
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkCommitProof)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_CommitProof{msg}
		return true, err
	case 13: // value.setVerifier
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkVerifier)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_SetVerifier{msg}
		return true, err
	case 14: // value.deposit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkDeposit)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_Deposit{msg}
		return true, err
	case 101: // value.limitOrder
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpotLimitOrder)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_LimitOrder{msg}
		return true, err
	case 102: // value.marketOrder
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpotMarketOrder)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_MarketOrder{msg}
		return true, err
	case 103: // value.revokeOrder
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpotRevokeOrder)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_RevokeOrder{msg}
		return true, err
	case 104: // value.exchangeBind
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpotExchangeBind)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_ExchangeBind{msg}
		return true, err
	case 105: // value.entrustOrder
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpotEntrustOrder)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_EntrustOrder{msg}
		return true, err
	case 107: // value.entrustRevokeOrder
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpotEntrustRevokeOrder)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_EntrustRevokeOrder{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ZksyncAction1_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ZksyncAction1)
	// value
	switch x := m.Value.(type) {
	case *ZksyncAction1_Withdraw:
		s := proto.Size(x.Withdraw)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_ContractToTree:
		s := proto.Size(x.ContractToTree)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_TreeToContract:
		s := proto.Size(x.TreeToContract)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_Transfer:
		s := proto.Size(x.Transfer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_TransferToNew:
		s := proto.Size(x.TransferToNew)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_ForceExit:
		s := proto.Size(x.ForceExit)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_SetPubKey:
		s := proto.Size(x.SetPubKey)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_FullExit:
		s := proto.Size(x.FullExit)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_Swap:
		s := proto.Size(x.Swap)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_SetVerifyKey:
		s := proto.Size(x.SetVerifyKey)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_CommitProof:
		s := proto.Size(x.CommitProof)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_SetVerifier:
		s := proto.Size(x.SetVerifier)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_Deposit:
		s := proto.Size(x.Deposit)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_LimitOrder:
		s := proto.Size(x.LimitOrder)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_MarketOrder:
		s := proto.Size(x.MarketOrder)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_RevokeOrder:
		s := proto.Size(x.RevokeOrder)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_ExchangeBind:
		s := proto.Size(x.ExchangeBind)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_EntrustOrder:
		s := proto.Size(x.EntrustOrder)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_EntrustRevokeOrder:
		s := proto.Size(x.EntrustRevokeOrder)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ZksyncAction1)(nil), "types.ZksyncAction1")
}

func init() { proto.RegisterFile("zksync1.proto", fileDescriptor_zksync1_6a76009bd3c90658) }

var fileDescriptor_zksync1_6a76009bd3c90658 = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xdb, 0x6b, 0xdb, 0x3e,
	0x14, 0xc7, 0x9d, 0xfc, 0x9a, 0x26, 0x55, 0x2e, 0xfc, 0x26, 0x76, 0x11, 0x85, 0x41, 0xd9, 0x5e,
	0xfa, 0x30, 0x62, 0xd2, 0x30, 0x56, 0x06, 0x1b, 0x34, 0x5b, 0x8b, 0x61, 0x97, 0x16, 0xd5, 0x6c,
	0x90, 0x37, 0xc7, 0x39, 0x4e, 0x84, 0x13, 0xcb, 0xc8, 0x72, 0x53, 0xf7, 0x1f, 0xde, 0xbf, 0x31,
	0x24, 0x5f, 0x22, 0x3b, 0x7b, 0x4a, 0xa4, 0xef, 0xe7, 0x73, 0x7c, 0x0e, 0x12, 0x42, 0xc3, 0xa7,
	0x30, 0xc9, 0x22, 0x7f, 0x32, 0x8e, 0x05, 0x97, 0x1c, 0x77, 0x64, 0x16, 0x43, 0x72, 0x8a, 0x92,
	0x98, 0xcb, 0x7c, 0xeb, 0x74, 0x90, 0x13, 0xf9, 0xea, 0xcd, 0x9f, 0x1e, 0x1a, 0xce, 0xf5, 0xc6,
	0x95, 0x2f, 0x19, 0x8f, 0x26, 0x78, 0x84, 0xda, 0x32, 0x23, 0xad, 0xb3, 0xd6, 0x79, 0x87, 0xb6,
	0x65, 0x86, 0x6d, 0xd4, 0xdb, 0x31, 0xb9, 0x5e, 0x0a, 0x6f, 0x47, 0xda, 0x67, 0xad, 0xf3, 0xfe,
	0xc5, 0xb3, 0xb1, 0xae, 0x3a, 0x9e, 0x87, 0xbf, 0x8b, 0xc0, 0xb1, 0x68, 0x05, 0xe1, 0x2b, 0x34,
	0xf2, 0x79, 0x24, 0x85, 0xe7, 0x4b, 0x97, 0xbb, 0x02, 0x80, 0xfc, 0xa7, 0xb5, 0x57, 0x95, 0xf6,
	0xa5, 0x16, 0x3b, 0x16, 0x6d, 0x08, 0xaa, 0x84, 0x14, 0x00, 0x2e, 0x2f, 0x49, 0x72, 0xd4, 0x28,
	0xe1, 0xd6, 0x62, 0x55, 0xa2, 0x2e, 0xa8, 0xb6, 0xa5, 0xf0, 0xa2, 0x24, 0x00, 0x41, 0x3a, 0x8d,
	0xb6, 0xdd, 0x22, 0x50, 0x6d, 0x97, 0x10, 0xfe, 0x8c, 0x86, 0xe5, 0x7f, 0x97, 0xff, 0x84, 0x1d,
	0x39, 0xd6, 0xd6, 0xcb, 0x03, 0x4b, 0xa7, 0x8e, 0x45, 0xeb, 0x38, 0xbe, 0x40, 0x27, 0x01, 0x17,
	0x3e, 0x5c, 0x3f, 0x32, 0x49, 0xba, 0xda, 0xc5, 0x95, 0x7b, 0x53, 0x26, 0x8e, 0x45, 0xf7, 0x98,
	0x72, 0x12, 0x90, 0x77, 0xe9, 0xe2, 0x1b, 0x64, 0xa4, 0xd7, 0x70, 0xee, 0xcb, 0x44, 0x39, 0x15,
	0xa6, 0x06, 0x0b, 0xd2, 0xcd, 0x46, 0x7f, 0xe6, 0xa4, 0x31, 0xd8, 0x4d, 0x11, 0xa8, 0xc1, 0x4a,
	0x08, 0xbf, 0x45, 0x47, 0xc9, 0xce, 0x8b, 0x09, 0xd2, 0xf0, 0x70, 0x5f, 0x7f, 0xe7, 0xc5, 0x8e,
	0x45, 0x75, 0x88, 0x2f, 0xd1, 0x20, 0x01, 0xf9, 0x0b, 0x04, 0x0b, 0x32, 0xd5, 0x4c, 0xbf, 0xd1,
	0x4c, 0x95, 0x38, 0x16, 0xad, 0x91, 0xf8, 0x12, 0xf5, 0x7d, 0xbe, 0xdd, 0x32, 0x79, 0x27, 0x38,
	0x0f, 0xc8, 0x40, 0x8b, 0xcf, 0x8d, 0xb3, 0xae, 0x32, 0xc7, 0xa2, 0x26, 0x8a, 0xdf, 0xa3, 0x7e,
	0x59, 0x89, 0x81, 0x20, 0xc3, 0xc6, 0x30, 0x65, 0xa0, 0x34, 0x83, 0xc3, 0xef, 0x50, 0x77, 0x09,
	0x31, 0x4f, 0x98, 0x24, 0x23, 0xad, 0xfc, 0x5f, 0x29, 0x5f, 0xf3, 0x7d, 0xc7, 0xa2, 0x25, 0x82,
	0x3f, 0x20, 0xb4, 0x61, 0x5b, 0x26, 0x6f, 0xc5, 0x12, 0x04, 0x01, 0x2d, 0xbc, 0x28, 0x84, 0xfb,
	0x98, 0xcb, 0xef, 0x55, 0xe8, 0x58, 0xd4, 0x40, 0xf1, 0x47, 0xd4, 0xdf, 0x7a, 0x22, 0x84, 0xc2,
	0x0c, 0x6a, 0xb7, 0x41, 0x99, 0x3f, 0xf6, 0xa9, 0x6a, 0xd1, 0x80, 0x95, 0x2b, 0xe0, 0x81, 0x87,
	0x90, 0xbb, 0xab, 0x03, 0x97, 0xee, 0x53, 0xe5, 0x1a, 0x30, 0xfe, 0x84, 0x06, 0xf0, 0xe8, 0xaf,
	0xbd, 0x68, 0x05, 0x33, 0x16, 0x2d, 0xc9, 0xba, 0x76, 0xf3, 0x95, 0x7c, 0x6d, 0xc4, 0xea, 0x38,
	0x4c, 0x5c, 0xeb, 0x91, 0x14, 0x69, 0x52, 0xf4, 0xcd, 0x0e, 0x75, 0x23, 0xd6, 0xba, 0xb1, 0xc6,
	0xb7, 0x08, 0x17, 0x6b, 0xa3, 0x45, 0x12, 0xea, 0x22, 0xaf, 0x0f, 0x8b, 0xd4, 0xe7, 0xf8, 0x87,
	0x3a, 0xeb, 0xa2, 0xce, 0x83, 0xb7, 0x49, 0x61, 0x36, 0x99, 0xdb, 0x2b, 0x26, 0xd7, 0xe9, 0x62,
	0xec, 0xf3, 0xad, 0x3d, 0x9d, 0xfa, 0x91, 0x1d, 0x6f, 0xd2, 0x15, 0xab, 0x7e, 0x96, 0x5e, 0x1c,
	0xdb, 0x4f, 0xa1, 0x7a, 0xaa, 0x6c, 0xfd, 0xa1, 0xc5, 0xb1, 0x7e, 0xa3, 0xa6, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x4e, 0xe8, 0x51, 0x10, 0xd5, 0x04, 0x00, 0x00,
}
