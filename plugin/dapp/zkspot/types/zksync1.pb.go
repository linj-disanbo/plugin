// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zksync1.proto

package types // import "github.com/33cn/plugin/plugin/dapp/zkspot/types"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/33cn/plugin/plugin/dapp/zksync/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ZksyncAction1 struct {
	Ty int32 `protobuf:"varint,1,opt,name=ty,proto3" json:"ty,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*ZksyncAction1_Withdraw
	//	*ZksyncAction1_ContractToTree
	//	*ZksyncAction1_TreeToContract
	//	*ZksyncAction1_Transfer
	//	*ZksyncAction1_TransferToNew
	//	*ZksyncAction1_ForceExit
	//	*ZksyncAction1_SetPubKey
	//	*ZksyncAction1_FullExit
	//	*ZksyncAction1_Swap
	//	*ZksyncAction1_SetVerifyKey
	//	*ZksyncAction1_CommitProof
	//	*ZksyncAction1_SetVerifier
	//	*ZksyncAction1_Deposit
	//	*ZksyncAction1_SetFee
	//	*ZksyncAction1_MintNFT
	//	*ZksyncAction1_WithdrawNFT
	//	*ZksyncAction1_TransferNFT
	//	*ZksyncAction1_LimitOrder
	//	*ZksyncAction1_MarketOrder
	//	*ZksyncAction1_RevokeOrder
	//	*ZksyncAction1_ExchangeBind
	//	*ZksyncAction1_EntrustOrder
	//	*ZksyncAction1_EntrustRevokeOrder
	Value                isZksyncAction1_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ZksyncAction1) Reset()         { *m = ZksyncAction1{} }
func (m *ZksyncAction1) String() string { return proto.CompactTextString(m) }
func (*ZksyncAction1) ProtoMessage()    {}
func (*ZksyncAction1) Descriptor() ([]byte, []int) {
	return fileDescriptor_zksync1_8238306ca80dc4a1, []int{0}
}
func (m *ZksyncAction1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZksyncAction1.Unmarshal(m, b)
}
func (m *ZksyncAction1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZksyncAction1.Marshal(b, m, deterministic)
}
func (dst *ZksyncAction1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZksyncAction1.Merge(dst, src)
}
func (m *ZksyncAction1) XXX_Size() int {
	return xxx_messageInfo_ZksyncAction1.Size(m)
}
func (m *ZksyncAction1) XXX_DiscardUnknown() {
	xxx_messageInfo_ZksyncAction1.DiscardUnknown(m)
}

var xxx_messageInfo_ZksyncAction1 proto.InternalMessageInfo

func (m *ZksyncAction1) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

type isZksyncAction1_Value interface {
	isZksyncAction1_Value()
}

type ZksyncAction1_Withdraw struct {
	Withdraw *types.ZkWithdraw `protobuf:"bytes,2,opt,name=withdraw,proto3,oneof"`
}

type ZksyncAction1_ContractToTree struct {
	ContractToTree *types.ZkContractToTree `protobuf:"bytes,3,opt,name=contractToTree,proto3,oneof"`
}

type ZksyncAction1_TreeToContract struct {
	TreeToContract *types.ZkTreeToContract `protobuf:"bytes,4,opt,name=treeToContract,proto3,oneof"`
}

type ZksyncAction1_Transfer struct {
	Transfer *types.ZkTransfer `protobuf:"bytes,5,opt,name=transfer,proto3,oneof"`
}

type ZksyncAction1_TransferToNew struct {
	TransferToNew *types.ZkTransferToNew `protobuf:"bytes,6,opt,name=transferToNew,proto3,oneof"`
}

type ZksyncAction1_ForceExit struct {
	ForceExit *types.ZkForceExit `protobuf:"bytes,7,opt,name=forceExit,proto3,oneof"`
}

type ZksyncAction1_SetPubKey struct {
	SetPubKey *types.ZkSetPubKey `protobuf:"bytes,8,opt,name=setPubKey,proto3,oneof"`
}

type ZksyncAction1_FullExit struct {
	FullExit *types.ZkFullExit `protobuf:"bytes,9,opt,name=fullExit,proto3,oneof"`
}

type ZksyncAction1_Swap struct {
	Swap *types.ZkSwap `protobuf:"bytes,10,opt,name=swap,proto3,oneof"`
}

type ZksyncAction1_SetVerifyKey struct {
	SetVerifyKey *types.ZkVerifyKey `protobuf:"bytes,102,opt,name=setVerifyKey,proto3,oneof"`
}

type ZksyncAction1_CommitProof struct {
	CommitProof *types.ZkCommitProof `protobuf:"bytes,103,opt,name=commitProof,proto3,oneof"`
}

type ZksyncAction1_SetVerifier struct {
	SetVerifier *types.ZkVerifier `protobuf:"bytes,104,opt,name=setVerifier,proto3,oneof"`
}

type ZksyncAction1_Deposit struct {
	Deposit *types.ZkDeposit `protobuf:"bytes,199,opt,name=deposit,proto3,oneof"`
}

type ZksyncAction1_SetFee struct {
	SetFee *types.ZkSetFee `protobuf:"bytes,14,opt,name=setFee,proto3,oneof"`
}

type ZksyncAction1_MintNFT struct {
	MintNFT *types.ZkMintNFT `protobuf:"bytes,16,opt,name=mintNFT,proto3,oneof"`
}

type ZksyncAction1_WithdrawNFT struct {
	WithdrawNFT *types.ZkWithdrawNFT `protobuf:"bytes,17,opt,name=withdrawNFT,proto3,oneof"`
}

type ZksyncAction1_TransferNFT struct {
	TransferNFT *types.ZkTransferNFT `protobuf:"bytes,18,opt,name=transferNFT,proto3,oneof"`
}

type ZksyncAction1_LimitOrder struct {
	LimitOrder *SpotLimitOrder `protobuf:"bytes,201,opt,name=limitOrder,proto3,oneof"`
}

type ZksyncAction1_MarketOrder struct {
	MarketOrder *SpotMarketOrder `protobuf:"bytes,202,opt,name=marketOrder,proto3,oneof"`
}

type ZksyncAction1_RevokeOrder struct {
	RevokeOrder *SpotRevokeOrder `protobuf:"bytes,203,opt,name=revokeOrder,proto3,oneof"`
}

type ZksyncAction1_ExchangeBind struct {
	ExchangeBind *SpotExchangeBind `protobuf:"bytes,204,opt,name=exchangeBind,proto3,oneof"`
}

type ZksyncAction1_EntrustOrder struct {
	EntrustOrder *SpotEntrustOrder `protobuf:"bytes,205,opt,name=entrustOrder,proto3,oneof"`
}

type ZksyncAction1_EntrustRevokeOrder struct {
	EntrustRevokeOrder *SpotEntrustRevokeOrder `protobuf:"bytes,207,opt,name=entrustRevokeOrder,proto3,oneof"`
}

func (*ZksyncAction1_Withdraw) isZksyncAction1_Value() {}

func (*ZksyncAction1_ContractToTree) isZksyncAction1_Value() {}

func (*ZksyncAction1_TreeToContract) isZksyncAction1_Value() {}

func (*ZksyncAction1_Transfer) isZksyncAction1_Value() {}

func (*ZksyncAction1_TransferToNew) isZksyncAction1_Value() {}

func (*ZksyncAction1_ForceExit) isZksyncAction1_Value() {}

func (*ZksyncAction1_SetPubKey) isZksyncAction1_Value() {}

func (*ZksyncAction1_FullExit) isZksyncAction1_Value() {}

func (*ZksyncAction1_Swap) isZksyncAction1_Value() {}

func (*ZksyncAction1_SetVerifyKey) isZksyncAction1_Value() {}

func (*ZksyncAction1_CommitProof) isZksyncAction1_Value() {}

func (*ZksyncAction1_SetVerifier) isZksyncAction1_Value() {}

func (*ZksyncAction1_Deposit) isZksyncAction1_Value() {}

func (*ZksyncAction1_SetFee) isZksyncAction1_Value() {}

func (*ZksyncAction1_MintNFT) isZksyncAction1_Value() {}

func (*ZksyncAction1_WithdrawNFT) isZksyncAction1_Value() {}

func (*ZksyncAction1_TransferNFT) isZksyncAction1_Value() {}

func (*ZksyncAction1_LimitOrder) isZksyncAction1_Value() {}

func (*ZksyncAction1_MarketOrder) isZksyncAction1_Value() {}

func (*ZksyncAction1_RevokeOrder) isZksyncAction1_Value() {}

func (*ZksyncAction1_ExchangeBind) isZksyncAction1_Value() {}

func (*ZksyncAction1_EntrustOrder) isZksyncAction1_Value() {}

func (*ZksyncAction1_EntrustRevokeOrder) isZksyncAction1_Value() {}

func (m *ZksyncAction1) GetValue() isZksyncAction1_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ZksyncAction1) GetWithdraw() *types.ZkWithdraw {
	if x, ok := m.GetValue().(*ZksyncAction1_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (m *ZksyncAction1) GetContractToTree() *types.ZkContractToTree {
	if x, ok := m.GetValue().(*ZksyncAction1_ContractToTree); ok {
		return x.ContractToTree
	}
	return nil
}

func (m *ZksyncAction1) GetTreeToContract() *types.ZkTreeToContract {
	if x, ok := m.GetValue().(*ZksyncAction1_TreeToContract); ok {
		return x.TreeToContract
	}
	return nil
}

func (m *ZksyncAction1) GetTransfer() *types.ZkTransfer {
	if x, ok := m.GetValue().(*ZksyncAction1_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *ZksyncAction1) GetTransferToNew() *types.ZkTransferToNew {
	if x, ok := m.GetValue().(*ZksyncAction1_TransferToNew); ok {
		return x.TransferToNew
	}
	return nil
}

func (m *ZksyncAction1) GetForceExit() *types.ZkForceExit {
	if x, ok := m.GetValue().(*ZksyncAction1_ForceExit); ok {
		return x.ForceExit
	}
	return nil
}

func (m *ZksyncAction1) GetSetPubKey() *types.ZkSetPubKey {
	if x, ok := m.GetValue().(*ZksyncAction1_SetPubKey); ok {
		return x.SetPubKey
	}
	return nil
}

func (m *ZksyncAction1) GetFullExit() *types.ZkFullExit {
	if x, ok := m.GetValue().(*ZksyncAction1_FullExit); ok {
		return x.FullExit
	}
	return nil
}

func (m *ZksyncAction1) GetSwap() *types.ZkSwap {
	if x, ok := m.GetValue().(*ZksyncAction1_Swap); ok {
		return x.Swap
	}
	return nil
}

func (m *ZksyncAction1) GetSetVerifyKey() *types.ZkVerifyKey {
	if x, ok := m.GetValue().(*ZksyncAction1_SetVerifyKey); ok {
		return x.SetVerifyKey
	}
	return nil
}

func (m *ZksyncAction1) GetCommitProof() *types.ZkCommitProof {
	if x, ok := m.GetValue().(*ZksyncAction1_CommitProof); ok {
		return x.CommitProof
	}
	return nil
}

func (m *ZksyncAction1) GetSetVerifier() *types.ZkVerifier {
	if x, ok := m.GetValue().(*ZksyncAction1_SetVerifier); ok {
		return x.SetVerifier
	}
	return nil
}

func (m *ZksyncAction1) GetDeposit() *types.ZkDeposit {
	if x, ok := m.GetValue().(*ZksyncAction1_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (m *ZksyncAction1) GetSetFee() *types.ZkSetFee {
	if x, ok := m.GetValue().(*ZksyncAction1_SetFee); ok {
		return x.SetFee
	}
	return nil
}

func (m *ZksyncAction1) GetMintNFT() *types.ZkMintNFT {
	if x, ok := m.GetValue().(*ZksyncAction1_MintNFT); ok {
		return x.MintNFT
	}
	return nil
}

func (m *ZksyncAction1) GetWithdrawNFT() *types.ZkWithdrawNFT {
	if x, ok := m.GetValue().(*ZksyncAction1_WithdrawNFT); ok {
		return x.WithdrawNFT
	}
	return nil
}

func (m *ZksyncAction1) GetTransferNFT() *types.ZkTransferNFT {
	if x, ok := m.GetValue().(*ZksyncAction1_TransferNFT); ok {
		return x.TransferNFT
	}
	return nil
}

func (m *ZksyncAction1) GetLimitOrder() *SpotLimitOrder {
	if x, ok := m.GetValue().(*ZksyncAction1_LimitOrder); ok {
		return x.LimitOrder
	}
	return nil
}

func (m *ZksyncAction1) GetMarketOrder() *SpotMarketOrder {
	if x, ok := m.GetValue().(*ZksyncAction1_MarketOrder); ok {
		return x.MarketOrder
	}
	return nil
}

func (m *ZksyncAction1) GetRevokeOrder() *SpotRevokeOrder {
	if x, ok := m.GetValue().(*ZksyncAction1_RevokeOrder); ok {
		return x.RevokeOrder
	}
	return nil
}

func (m *ZksyncAction1) GetExchangeBind() *SpotExchangeBind {
	if x, ok := m.GetValue().(*ZksyncAction1_ExchangeBind); ok {
		return x.ExchangeBind
	}
	return nil
}

func (m *ZksyncAction1) GetEntrustOrder() *SpotEntrustOrder {
	if x, ok := m.GetValue().(*ZksyncAction1_EntrustOrder); ok {
		return x.EntrustOrder
	}
	return nil
}

func (m *ZksyncAction1) GetEntrustRevokeOrder() *SpotEntrustRevokeOrder {
	if x, ok := m.GetValue().(*ZksyncAction1_EntrustRevokeOrder); ok {
		return x.EntrustRevokeOrder
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ZksyncAction1) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ZksyncAction1_OneofMarshaler, _ZksyncAction1_OneofUnmarshaler, _ZksyncAction1_OneofSizer, []interface{}{
		(*ZksyncAction1_Withdraw)(nil),
		(*ZksyncAction1_ContractToTree)(nil),
		(*ZksyncAction1_TreeToContract)(nil),
		(*ZksyncAction1_Transfer)(nil),
		(*ZksyncAction1_TransferToNew)(nil),
		(*ZksyncAction1_ForceExit)(nil),
		(*ZksyncAction1_SetPubKey)(nil),
		(*ZksyncAction1_FullExit)(nil),
		(*ZksyncAction1_Swap)(nil),
		(*ZksyncAction1_SetVerifyKey)(nil),
		(*ZksyncAction1_CommitProof)(nil),
		(*ZksyncAction1_SetVerifier)(nil),
		(*ZksyncAction1_Deposit)(nil),
		(*ZksyncAction1_SetFee)(nil),
		(*ZksyncAction1_MintNFT)(nil),
		(*ZksyncAction1_WithdrawNFT)(nil),
		(*ZksyncAction1_TransferNFT)(nil),
		(*ZksyncAction1_LimitOrder)(nil),
		(*ZksyncAction1_MarketOrder)(nil),
		(*ZksyncAction1_RevokeOrder)(nil),
		(*ZksyncAction1_ExchangeBind)(nil),
		(*ZksyncAction1_EntrustOrder)(nil),
		(*ZksyncAction1_EntrustRevokeOrder)(nil),
	}
}

func _ZksyncAction1_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ZksyncAction1)
	// value
	switch x := m.Value.(type) {
	case *ZksyncAction1_Withdraw:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Withdraw); err != nil {
			return err
		}
	case *ZksyncAction1_ContractToTree:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ContractToTree); err != nil {
			return err
		}
	case *ZksyncAction1_TreeToContract:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TreeToContract); err != nil {
			return err
		}
	case *ZksyncAction1_Transfer:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transfer); err != nil {
			return err
		}
	case *ZksyncAction1_TransferToNew:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransferToNew); err != nil {
			return err
		}
	case *ZksyncAction1_ForceExit:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ForceExit); err != nil {
			return err
		}
	case *ZksyncAction1_SetPubKey:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetPubKey); err != nil {
			return err
		}
	case *ZksyncAction1_FullExit:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FullExit); err != nil {
			return err
		}
	case *ZksyncAction1_Swap:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Swap); err != nil {
			return err
		}
	case *ZksyncAction1_SetVerifyKey:
		b.EncodeVarint(102<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetVerifyKey); err != nil {
			return err
		}
	case *ZksyncAction1_CommitProof:
		b.EncodeVarint(103<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommitProof); err != nil {
			return err
		}
	case *ZksyncAction1_SetVerifier:
		b.EncodeVarint(104<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetVerifier); err != nil {
			return err
		}
	case *ZksyncAction1_Deposit:
		b.EncodeVarint(199<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Deposit); err != nil {
			return err
		}
	case *ZksyncAction1_SetFee:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetFee); err != nil {
			return err
		}
	case *ZksyncAction1_MintNFT:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MintNFT); err != nil {
			return err
		}
	case *ZksyncAction1_WithdrawNFT:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WithdrawNFT); err != nil {
			return err
		}
	case *ZksyncAction1_TransferNFT:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransferNFT); err != nil {
			return err
		}
	case *ZksyncAction1_LimitOrder:
		b.EncodeVarint(201<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LimitOrder); err != nil {
			return err
		}
	case *ZksyncAction1_MarketOrder:
		b.EncodeVarint(202<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MarketOrder); err != nil {
			return err
		}
	case *ZksyncAction1_RevokeOrder:
		b.EncodeVarint(203<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RevokeOrder); err != nil {
			return err
		}
	case *ZksyncAction1_ExchangeBind:
		b.EncodeVarint(204<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExchangeBind); err != nil {
			return err
		}
	case *ZksyncAction1_EntrustOrder:
		b.EncodeVarint(205<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EntrustOrder); err != nil {
			return err
		}
	case *ZksyncAction1_EntrustRevokeOrder:
		b.EncodeVarint(207<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EntrustRevokeOrder); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ZksyncAction1.Value has unexpected type %T", x)
	}
	return nil
}

func _ZksyncAction1_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ZksyncAction1)
	switch tag {
	case 2: // value.withdraw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkWithdraw)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_Withdraw{msg}
		return true, err
	case 3: // value.contractToTree
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkContractToTree)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_ContractToTree{msg}
		return true, err
	case 4: // value.treeToContract
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkTreeToContract)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_TreeToContract{msg}
		return true, err
	case 5: // value.transfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkTransfer)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_Transfer{msg}
		return true, err
	case 6: // value.transferToNew
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkTransferToNew)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_TransferToNew{msg}
		return true, err
	case 7: // value.forceExit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkForceExit)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_ForceExit{msg}
		return true, err
	case 8: // value.setPubKey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkSetPubKey)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_SetPubKey{msg}
		return true, err
	case 9: // value.fullExit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkFullExit)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_FullExit{msg}
		return true, err
	case 10: // value.swap
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkSwap)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_Swap{msg}
		return true, err
	case 102: // value.setVerifyKey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkVerifyKey)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_SetVerifyKey{msg}
		return true, err
	case 103: // value.commitProof
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkCommitProof)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_CommitProof{msg}
		return true, err
	case 104: // value.setVerifier
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkVerifier)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_SetVerifier{msg}
		return true, err
	case 199: // value.deposit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkDeposit)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_Deposit{msg}
		return true, err
	case 14: // value.setFee
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkSetFee)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_SetFee{msg}
		return true, err
	case 16: // value.mintNFT
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkMintNFT)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_MintNFT{msg}
		return true, err
	case 17: // value.withdrawNFT
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkWithdrawNFT)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_WithdrawNFT{msg}
		return true, err
	case 18: // value.transferNFT
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(types.ZkTransferNFT)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_TransferNFT{msg}
		return true, err
	case 201: // value.limitOrder
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpotLimitOrder)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_LimitOrder{msg}
		return true, err
	case 202: // value.marketOrder
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpotMarketOrder)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_MarketOrder{msg}
		return true, err
	case 203: // value.revokeOrder
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpotRevokeOrder)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_RevokeOrder{msg}
		return true, err
	case 204: // value.exchangeBind
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpotExchangeBind)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_ExchangeBind{msg}
		return true, err
	case 205: // value.entrustOrder
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpotEntrustOrder)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_EntrustOrder{msg}
		return true, err
	case 207: // value.entrustRevokeOrder
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SpotEntrustRevokeOrder)
		err := b.DecodeMessage(msg)
		m.Value = &ZksyncAction1_EntrustRevokeOrder{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ZksyncAction1_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ZksyncAction1)
	// value
	switch x := m.Value.(type) {
	case *ZksyncAction1_Withdraw:
		s := proto.Size(x.Withdraw)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_ContractToTree:
		s := proto.Size(x.ContractToTree)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_TreeToContract:
		s := proto.Size(x.TreeToContract)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_Transfer:
		s := proto.Size(x.Transfer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_TransferToNew:
		s := proto.Size(x.TransferToNew)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_ForceExit:
		s := proto.Size(x.ForceExit)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_SetPubKey:
		s := proto.Size(x.SetPubKey)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_FullExit:
		s := proto.Size(x.FullExit)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_Swap:
		s := proto.Size(x.Swap)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_SetVerifyKey:
		s := proto.Size(x.SetVerifyKey)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_CommitProof:
		s := proto.Size(x.CommitProof)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_SetVerifier:
		s := proto.Size(x.SetVerifier)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_Deposit:
		s := proto.Size(x.Deposit)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_SetFee:
		s := proto.Size(x.SetFee)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_MintNFT:
		s := proto.Size(x.MintNFT)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_WithdrawNFT:
		s := proto.Size(x.WithdrawNFT)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_TransferNFT:
		s := proto.Size(x.TransferNFT)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_LimitOrder:
		s := proto.Size(x.LimitOrder)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_MarketOrder:
		s := proto.Size(x.MarketOrder)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_RevokeOrder:
		s := proto.Size(x.RevokeOrder)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_ExchangeBind:
		s := proto.Size(x.ExchangeBind)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_EntrustOrder:
		s := proto.Size(x.EntrustOrder)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZksyncAction1_EntrustRevokeOrder:
		s := proto.Size(x.EntrustRevokeOrder)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ZkTransferWithFee struct {
	TokenId              uint64             `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	AmountOut            string             `protobuf:"bytes,2,opt,name=amountOut,proto3" json:"amountOut,omitempty"`
	FromAccountId        uint64             `protobuf:"varint,3,opt,name=fromAccountId,proto3" json:"fromAccountId,omitempty"`
	AmountIn             string             `protobuf:"bytes,4,opt,name=amountIn,proto3" json:"amountIn,omitempty"`
	ToAccountId          uint64             `protobuf:"varint,5,opt,name=toAccountId,proto3" json:"toAccountId,omitempty"`
	Signature            *types.ZkSignature `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ZkTransferWithFee) Reset()         { *m = ZkTransferWithFee{} }
func (m *ZkTransferWithFee) String() string { return proto.CompactTextString(m) }
func (*ZkTransferWithFee) ProtoMessage()    {}
func (*ZkTransferWithFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_zksync1_8238306ca80dc4a1, []int{1}
}
func (m *ZkTransferWithFee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZkTransferWithFee.Unmarshal(m, b)
}
func (m *ZkTransferWithFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZkTransferWithFee.Marshal(b, m, deterministic)
}
func (dst *ZkTransferWithFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZkTransferWithFee.Merge(dst, src)
}
func (m *ZkTransferWithFee) XXX_Size() int {
	return xxx_messageInfo_ZkTransferWithFee.Size(m)
}
func (m *ZkTransferWithFee) XXX_DiscardUnknown() {
	xxx_messageInfo_ZkTransferWithFee.DiscardUnknown(m)
}

var xxx_messageInfo_ZkTransferWithFee proto.InternalMessageInfo

func (m *ZkTransferWithFee) GetTokenId() uint64 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

func (m *ZkTransferWithFee) GetAmountOut() string {
	if m != nil {
		return m.AmountOut
	}
	return ""
}

func (m *ZkTransferWithFee) GetFromAccountId() uint64 {
	if m != nil {
		return m.FromAccountId
	}
	return 0
}

func (m *ZkTransferWithFee) GetAmountIn() string {
	if m != nil {
		return m.AmountIn
	}
	return ""
}

func (m *ZkTransferWithFee) GetToAccountId() uint64 {
	if m != nil {
		return m.ToAccountId
	}
	return 0
}

func (m *ZkTransferWithFee) GetSignature() *types.ZkSignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*ZksyncAction1)(nil), "types.ZksyncAction1")
	proto.RegisterType((*ZkTransferWithFee)(nil), "types.ZkTransferWithFee")
}

func init() { proto.RegisterFile("zksync1.proto", fileDescriptor_zksync1_8238306ca80dc4a1) }

var fileDescriptor_zksync1_8238306ca80dc4a1 = []byte{
	// 741 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x95, 0xdb, 0x4e, 0xdb, 0x4c,
	0x10, 0xc7, 0x1d, 0xbe, 0x84, 0x90, 0x09, 0xe1, 0x83, 0x55, 0x0f, 0x2b, 0xd4, 0x4a, 0x88, 0xf6,
	0x82, 0x4a, 0x6d, 0x52, 0x40, 0x95, 0x90, 0x2a, 0x21, 0x41, 0x4b, 0x64, 0xd4, 0x72, 0xd0, 0x62,
	0x15, 0x89, 0x3b, 0xe3, 0x6c, 0x92, 0x55, 0x62, 0xaf, 0xb5, 0x5e, 0x13, 0xc2, 0xab, 0xf5, 0x01,
	0xaa, 0x9e, 0xd4, 0x67, 0xe8, 0x9b, 0x54, 0xbb, 0x3e, 0xad, 0x0d, 0x57, 0xc9, 0xce, 0xff, 0xff,
	0x1b, 0xcf, 0x64, 0x27, 0x63, 0xe8, 0xdc, 0x4d, 0xa2, 0x79, 0xe0, 0x6d, 0x77, 0x43, 0xc1, 0x25,
	0x47, 0x0d, 0x39, 0x0f, 0x69, 0xb4, 0x0e, 0x51, 0xc8, 0x65, 0x12, 0x5a, 0xef, 0xcc, 0x98, 0x0c,
	0x68, 0x14, 0xa5, 0xc7, 0xe5, 0x04, 0x48, 0x4e, 0x9b, 0x5f, 0x01, 0x3a, 0x57, 0x3a, 0x70, 0xe0,
	0x49, 0xc6, 0x83, 0x6d, 0xb4, 0x02, 0x0b, 0x72, 0x8e, 0x6b, 0x1b, 0xb5, 0xad, 0x06, 0x59, 0x90,
	0x73, 0xd4, 0x83, 0xa5, 0x19, 0x93, 0xe3, 0x81, 0x70, 0x67, 0x78, 0x61, 0xa3, 0xb6, 0xd5, 0xde,
	0x59, 0xeb, 0xea, 0x87, 0x74, 0xaf, 0x26, 0x97, 0xa9, 0x60, 0x5b, 0x24, 0x37, 0xa1, 0x03, 0x58,
	0xf1, 0x78, 0x20, 0x85, 0xeb, 0x49, 0x87, 0x3b, 0x82, 0x52, 0xfc, 0x9f, 0xc6, 0x9e, 0xe6, 0xd8,
	0x87, 0x92, 0x6c, 0x5b, 0xa4, 0x02, 0xa8, 0x14, 0x52, 0x50, 0xea, 0xf0, 0xcc, 0x89, 0xeb, 0x95,
	0x14, 0x4e, 0x49, 0x56, 0x29, 0xca, 0x80, 0x2a, 0x5b, 0x0a, 0x37, 0x88, 0x86, 0x54, 0xe0, 0x46,
	0xa5, 0x6c, 0x27, 0x15, 0x54, 0xd9, 0x99, 0x09, 0xed, 0x43, 0x27, 0xfb, 0xee, 0xf0, 0x53, 0x3a,
	0xc3, 0x8b, 0x9a, 0x7a, 0x72, 0x8f, 0xd2, 0xaa, 0x6d, 0x91, 0xb2, 0x1d, 0xed, 0x40, 0x6b, 0xc8,
	0x85, 0x47, 0x8f, 0x6e, 0x99, 0xc4, 0x4d, 0xcd, 0xa2, 0x9c, 0xed, 0x67, 0x8a, 0x6d, 0x91, 0xc2,
	0xa6, 0x98, 0x88, 0xca, 0xf3, 0xf8, 0xfa, 0x13, 0x9d, 0xe3, 0xa5, 0x0a, 0x73, 0x91, 0x29, 0x8a,
	0xc9, 0x6d, 0xaa, 0xb1, 0x61, 0x3c, 0x9d, 0xea, 0xc7, 0xb4, 0x2a, 0x8d, 0xf5, 0x53, 0x41, 0x35,
	0x96, 0x99, 0xd0, 0x0b, 0xa8, 0x47, 0x33, 0x37, 0xc4, 0xa0, 0xcd, 0x9d, 0x22, 0xff, 0xcc, 0x0d,
	0x6d, 0x8b, 0x68, 0x11, 0xed, 0xc1, 0x72, 0x44, 0xe5, 0x17, 0x2a, 0xd8, 0x70, 0xae, 0x8a, 0x19,
	0x56, 0x8a, 0xc9, 0x15, 0xdb, 0x22, 0x25, 0x27, 0xda, 0x83, 0xb6, 0xc7, 0x7d, 0x9f, 0xc9, 0x73,
	0xc1, 0xf9, 0x10, 0x8f, 0x34, 0xf8, 0xc8, 0xb8, 0xeb, 0x5c, 0xb3, 0x2d, 0x62, 0x5a, 0xd1, 0x3b,
	0x68, 0x67, 0x99, 0x18, 0x15, 0x78, 0x5c, 0x69, 0x26, 0x13, 0x14, 0x66, 0xf8, 0xd0, 0x1b, 0x68,
	0x0e, 0x68, 0xc8, 0x23, 0x26, 0xf1, 0xb7, 0x9a, 0x66, 0x56, 0x73, 0xe6, 0x63, 0x22, 0xd8, 0x16,
	0xc9, 0x3c, 0xe8, 0x15, 0x2c, 0x46, 0x54, 0xf6, 0x29, 0xc5, 0x2b, 0xda, 0xfc, 0xbf, 0xf9, 0x03,
	0xf7, 0xf5, 0xf8, 0xa5, 0x06, 0xf4, 0x1a, 0x9a, 0x3e, 0x0b, 0xe4, 0x69, 0xdf, 0xc1, 0xab, 0x95,
	0xc4, 0x27, 0x49, 0x5c, 0x25, 0x4e, 0x2d, 0xaa, 0xf1, 0x6c, 0xe6, 0x15, 0xb1, 0x56, 0x69, 0xfc,
	0xb2, 0xd0, 0x54, 0x07, 0x86, 0x55, 0x91, 0xd9, 0xec, 0x28, 0x12, 0x55, 0x48, 0xa7, 0xd0, 0x14,
	0x69, 0x58, 0xd1, 0x1e, 0xc0, 0x94, 0xf9, 0x4c, 0x9e, 0x89, 0x01, 0x15, 0xf8, 0x7b, 0xd2, 0xfe,
	0xe3, 0x94, 0xbc, 0x08, 0xb9, 0xfc, 0x9c, 0xab, 0xb6, 0x45, 0x0c, 0x2f, 0x7a, 0x0f, 0x6d, 0xdf,
	0x15, 0x13, 0x9a, 0xa2, 0x3f, 0x6a, 0xa5, 0xe9, 0x56, 0xe8, 0x49, 0x21, 0xab, 0xc7, 0x1a, 0x6e,
	0x05, 0x0b, 0x7a, 0xc3, 0x27, 0x34, 0x81, 0x7f, 0xde, 0x87, 0x49, 0x21, 0x2b, 0xd8, 0x70, 0xa3,
	0x7d, 0x58, 0xa6, 0xb7, 0xde, 0xd8, 0x0d, 0x46, 0xf4, 0x90, 0x05, 0x03, 0xfc, 0xab, 0x56, 0xfa,
	0x2f, 0x2b, 0xfa, 0xc8, 0xd0, 0xd5, 0x80, 0x99, 0x7e, 0xcd, 0x07, 0x52, 0xc4, 0x51, 0x5a, 0xfa,
	0xef, 0x07, 0x78, 0x43, 0xd7, 0xbc, 0x71, 0x46, 0xe7, 0x80, 0xd2, 0xb3, 0x51, 0x24, 0xfe, 0x93,
	0x64, 0x79, 0x7e, 0x3f, 0x4b, 0xb9, 0x95, 0x07, 0xd8, 0xc3, 0x26, 0x34, 0x6e, 0xdc, 0x69, 0x4c,
	0x37, 0xff, 0xd6, 0x60, 0xad, 0xb8, 0x2f, 0x75, 0xe3, 0x6a, 0x8c, 0x30, 0x34, 0x25, 0x9f, 0xd0,
	0xe0, 0x78, 0xa0, 0xd7, 0x68, 0x9d, 0x64, 0x47, 0xf4, 0x0c, 0x5a, 0xae, 0xcf, 0xe3, 0x40, 0x9e,
	0xc5, 0x52, 0x2f, 0xd3, 0x16, 0x29, 0x02, 0xe8, 0x25, 0x74, 0x86, 0x82, 0xfb, 0x07, 0x9e, 0xa7,
	0x22, 0xc7, 0x03, 0xbd, 0x37, 0xeb, 0xa4, 0x1c, 0x44, 0xeb, 0xb0, 0x94, 0x20, 0xc7, 0x81, 0xde,
	0x8a, 0x2d, 0x92, 0x9f, 0xd1, 0x06, 0xb4, 0x25, 0x2f, 0xf8, 0x86, 0xe6, 0xcd, 0x10, 0x7a, 0x0b,
	0xad, 0x88, 0x8d, 0x02, 0x57, 0xc6, 0x82, 0xa6, 0x1b, 0xce, 0xd8, 0x38, 0x99, 0x42, 0x0a, 0xd3,
	0xe1, 0xf6, 0x55, 0x6f, 0xc4, 0xe4, 0x38, 0xbe, 0xee, 0x7a, 0xdc, 0xef, 0xed, 0xee, 0x7a, 0x41,
	0x2f, 0x9c, 0xc6, 0x23, 0x96, 0x7f, 0x0c, 0xdc, 0x30, 0xec, 0xdd, 0x4d, 0xd4, 0x1b, 0xa7, 0xa7,
	0x33, 0x5d, 0x2f, 0xea, 0x77, 0xcb, 0xee, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0xe8, 0x74,
	0xa9, 0x9c, 0x06, 0x00, 0x00,
}
