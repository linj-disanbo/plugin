// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.5.0
// source: spot.proto

package types

import (
	context "context"
	types "github.com/33cn/plugin/plugin/dapp/zksync/types"
	grpc "google.golang.org/grpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Asset may come from L1 ERC20,  other contract Token, zkspot gened NFT, evm-solidity-NFT
type AssetType int32

const (
	AssetType_Unknow  AssetType = 0
	AssetType_L1Erc20 AssetType = 1
	AssetType_Token   AssetType = 2
	AssetType_ZkNft   AssetType = 3
	AssetType_EvmNft  AssetType = 4
)

// Enum value maps for AssetType.
var (
	AssetType_name = map[int32]string{
		0: "Unknow",
		1: "L1Erc20",
		2: "Token",
		3: "ZkNft",
		4: "EvmNft",
	}
	AssetType_value = map[string]int32{
		"Unknow":  0,
		"L1Erc20": 1,
		"Token":   2,
		"ZkNft":   3,
		"EvmNft":  4,
	}
)

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}

func (x AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_spot_proto_enumTypes[0].Descriptor()
}

func (AssetType) Type() protoreflect.EnumType {
	return &file_spot_proto_enumTypes[0]
}

func (x AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetType.Descriptor instead.
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{0}
}

type SpotAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*SpotAction_LimitOrder
	//	*SpotAction_MarketOrder
	//	*SpotAction_RevokeOrder
	//	*SpotAction_ExchangeBind
	//	*SpotAction_EntrustOrder
	//	*SpotAction_EntrustRevokeOrder
	Value isSpotAction_Value `protobuf_oneof:"value"`
	Ty    int32              `protobuf:"varint,6,opt,name=ty,proto3" json:"ty,omitempty"`
}

func (x *SpotAction) Reset() {
	*x = SpotAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotAction) ProtoMessage() {}

func (x *SpotAction) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotAction.ProtoReflect.Descriptor instead.
func (*SpotAction) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{0}
}

func (m *SpotAction) GetValue() isSpotAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SpotAction) GetLimitOrder() *SpotLimitOrder {
	if x, ok := x.GetValue().(*SpotAction_LimitOrder); ok {
		return x.LimitOrder
	}
	return nil
}

func (x *SpotAction) GetMarketOrder() *SpotMarketOrder {
	if x, ok := x.GetValue().(*SpotAction_MarketOrder); ok {
		return x.MarketOrder
	}
	return nil
}

func (x *SpotAction) GetRevokeOrder() *SpotRevokeOrder {
	if x, ok := x.GetValue().(*SpotAction_RevokeOrder); ok {
		return x.RevokeOrder
	}
	return nil
}

func (x *SpotAction) GetExchangeBind() *SpotExchangeBind {
	if x, ok := x.GetValue().(*SpotAction_ExchangeBind); ok {
		return x.ExchangeBind
	}
	return nil
}

func (x *SpotAction) GetEntrustOrder() *SpotEntrustOrder {
	if x, ok := x.GetValue().(*SpotAction_EntrustOrder); ok {
		return x.EntrustOrder
	}
	return nil
}

func (x *SpotAction) GetEntrustRevokeOrder() *SpotEntrustRevokeOrder {
	if x, ok := x.GetValue().(*SpotAction_EntrustRevokeOrder); ok {
		return x.EntrustRevokeOrder
	}
	return nil
}

func (x *SpotAction) GetTy() int32 {
	if x != nil {
		return x.Ty
	}
	return 0
}

type isSpotAction_Value interface {
	isSpotAction_Value()
}

type SpotAction_LimitOrder struct {
	LimitOrder *SpotLimitOrder `protobuf:"bytes,1,opt,name=limitOrder,proto3,oneof"`
}

type SpotAction_MarketOrder struct {
	MarketOrder *SpotMarketOrder `protobuf:"bytes,2,opt,name=marketOrder,proto3,oneof"`
}

type SpotAction_RevokeOrder struct {
	RevokeOrder *SpotRevokeOrder `protobuf:"bytes,3,opt,name=revokeOrder,proto3,oneof"`
}

type SpotAction_ExchangeBind struct {
	ExchangeBind *SpotExchangeBind `protobuf:"bytes,4,opt,name=exchangeBind,proto3,oneof"`
}

type SpotAction_EntrustOrder struct {
	EntrustOrder *SpotEntrustOrder `protobuf:"bytes,5,opt,name=entrustOrder,proto3,oneof"`
}

type SpotAction_EntrustRevokeOrder struct {
	EntrustRevokeOrder *SpotEntrustRevokeOrder `protobuf:"bytes,7,opt,name=entrustRevokeOrder,proto3,oneof"`
}

func (*SpotAction_LimitOrder) isSpotAction_Value() {}

func (*SpotAction_MarketOrder) isSpotAction_Value() {}

func (*SpotAction_RevokeOrder) isSpotAction_Value() {}

func (*SpotAction_ExchangeBind) isSpotAction_Value() {}

func (*SpotAction_EntrustOrder) isSpotAction_Value() {}

func (*SpotAction_EntrustRevokeOrder) isSpotAction_Value() {}

type TokenAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Execer string `protobuf:"bytes,1,opt,name=execer,proto3" json:"execer,omitempty"`
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *TokenAsset) Reset() {
	*x = TokenAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenAsset) ProtoMessage() {}

func (x *TokenAsset) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenAsset.ProtoReflect.Descriptor instead.
func (*TokenAsset) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{1}
}

func (x *TokenAsset) GetExecer() string {
	if x != nil {
		return x.Execer
	}
	return ""
}

func (x *TokenAsset) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ty AssetType `protobuf:"varint,1,opt,name=ty,proto3,enum=types.AssetType" json:"ty,omitempty"`
	// Types that are assignable to Value:
	//	*Asset_ZkAssetid
	//	*Asset_TokenAsset
	//	*Asset_EvmNftID
	Value isAsset_Value `protobuf_oneof:"value"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{2}
}

func (x *Asset) GetTy() AssetType {
	if x != nil {
		return x.Ty
	}
	return AssetType_Unknow
}

func (m *Asset) GetValue() isAsset_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Asset) GetZkAssetid() uint64 {
	if x, ok := x.GetValue().(*Asset_ZkAssetid); ok {
		return x.ZkAssetid
	}
	return 0
}

func (x *Asset) GetTokenAsset() *TokenAsset {
	if x, ok := x.GetValue().(*Asset_TokenAsset); ok {
		return x.TokenAsset
	}
	return nil
}

func (x *Asset) GetEvmNftID() uint64 {
	if x, ok := x.GetValue().(*Asset_EvmNftID); ok {
		return x.EvmNftID
	}
	return 0
}

type isAsset_Value interface {
	isAsset_Value()
}

type Asset_ZkAssetid struct {
	// L1Erc20
	ZkAssetid uint64 `protobuf:"varint,2,opt,name=zkAssetid,proto3,oneof"`
}

type Asset_TokenAsset struct {
	// Token
	TokenAsset *TokenAsset `protobuf:"bytes,3,opt,name=tokenAsset,proto3,oneof"`
}

type Asset_EvmNftID struct {
	// nft kind
	EvmNftID uint64 `protobuf:"varint,4,opt,name=evmNftID,proto3,oneof"`
}

func (*Asset_ZkAssetid) isAsset_Value() {}

func (*Asset_TokenAsset) isAsset_Value() {}

func (*Asset_EvmNftID) isAsset_Value() {}

type ZkOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID  uint64 `protobuf:"varint,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	EthAddress string `protobuf:"bytes,2,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
	//uint64 nonce = 3;
	TokenSell uint64 `protobuf:"varint,4,opt,name=tokenSell,proto3" json:"tokenSell,omitempty"`
	TokenBuy  uint64 `protobuf:"varint,5,opt,name=tokenBuy,proto3" json:"tokenBuy,omitempty"`
	Amount    string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Ratio1    string `protobuf:"bytes,7,opt,name=ratio1,proto3" json:"ratio1,omitempty"`
	Ratio2    string `protobuf:"bytes,8,opt,name=ratio2,proto3" json:"ratio2,omitempty"`
	//uint64 validFrom = 9;
	//uint64 validUntil = 10;
	SellAssetType AssetType          `protobuf:"varint,11,opt,name=sellAssetType,proto3,enum=types.AssetType" json:"sellAssetType,omitempty"`
	BuyAssetType  AssetType          `protobuf:"varint,12,opt,name=buyAssetType,proto3,enum=types.AssetType" json:"buyAssetType,omitempty"`
	Signature     *types.ZkSignature `protobuf:"bytes,20,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkOrder) Reset() {
	*x = ZkOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkOrder) ProtoMessage() {}

func (x *ZkOrder) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkOrder.ProtoReflect.Descriptor instead.
func (*ZkOrder) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{3}
}

func (x *ZkOrder) GetAccountID() uint64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *ZkOrder) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

func (x *ZkOrder) GetTokenSell() uint64 {
	if x != nil {
		return x.TokenSell
	}
	return 0
}

func (x *ZkOrder) GetTokenBuy() uint64 {
	if x != nil {
		return x.TokenBuy
	}
	return 0
}

func (x *ZkOrder) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkOrder) GetRatio1() string {
	if x != nil {
		return x.Ratio1
	}
	return ""
}

func (x *ZkOrder) GetRatio2() string {
	if x != nil {
		return x.Ratio2
	}
	return ""
}

func (x *ZkOrder) GetSellAssetType() AssetType {
	if x != nil {
		return x.SellAssetType
	}
	return AssetType_Unknow
}

func (x *ZkOrder) GetBuyAssetType() AssetType {
	if x != nil {
		return x.BuyAssetType
	}
	return AssetType_Unknow
}

func (x *ZkOrder) GetSignature() *types.ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

//限价订单
type SpotLimitOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//交易对
	LeftAsset uint64 `protobuf:"varint,1,opt,name=leftAsset,proto3" json:"leftAsset,omitempty"`
	//交易对
	RightAsset uint64 `protobuf:"varint,2,opt,name=rightAsset,proto3" json:"rightAsset,omitempty"`
	//价格
	Price int64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	//总量
	Amount int64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	//操作， 1为买，2为卖
	Op    int32    `protobuf:"varint,5,opt,name=op,proto3" json:"op,omitempty"`
	Order *ZkOrder `protobuf:"bytes,6,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *SpotLimitOrder) Reset() {
	*x = SpotLimitOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotLimitOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotLimitOrder) ProtoMessage() {}

func (x *SpotLimitOrder) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotLimitOrder.ProtoReflect.Descriptor instead.
func (*SpotLimitOrder) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{4}
}

func (x *SpotLimitOrder) GetLeftAsset() uint64 {
	if x != nil {
		return x.LeftAsset
	}
	return 0
}

func (x *SpotLimitOrder) GetRightAsset() uint64 {
	if x != nil {
		return x.RightAsset
	}
	return 0
}

func (x *SpotLimitOrder) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SpotLimitOrder) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SpotLimitOrder) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *SpotLimitOrder) GetOrder() *ZkOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

//限价订单
type AssetLimitOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//交易对
	LeftAsset *Asset `protobuf:"bytes,1,opt,name=leftAsset,proto3" json:"leftAsset,omitempty"`
	//交易对
	RightAsset *Asset `protobuf:"bytes,2,opt,name=rightAsset,proto3" json:"rightAsset,omitempty"`
	//价格
	Price int64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	//总量
	Amount int64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	//操作， 1为买，2为卖
	Op    int32    `protobuf:"varint,5,opt,name=op,proto3" json:"op,omitempty"`
	Order *ZkOrder `protobuf:"bytes,6,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *AssetLimitOrder) Reset() {
	*x = AssetLimitOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetLimitOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetLimitOrder) ProtoMessage() {}

func (x *AssetLimitOrder) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetLimitOrder.ProtoReflect.Descriptor instead.
func (*AssetLimitOrder) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{5}
}

func (x *AssetLimitOrder) GetLeftAsset() *Asset {
	if x != nil {
		return x.LeftAsset
	}
	return nil
}

func (x *AssetLimitOrder) GetRightAsset() *Asset {
	if x != nil {
		return x.RightAsset
	}
	return nil
}

func (x *AssetLimitOrder) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AssetLimitOrder) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AssetLimitOrder) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *AssetLimitOrder) GetOrder() *ZkOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

// 使用挂单摘单模式, 先挂单
type SpotNftOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//交易对
	LeftAsset uint64 `protobuf:"varint,1,opt,name=leftAsset,proto3" json:"leftAsset,omitempty"`
	//交易对
	RightAsset uint64 `protobuf:"varint,2,opt,name=rightAsset,proto3" json:"rightAsset,omitempty"`
	//价格
	Price int64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	//总量
	Amount int64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	//操作， 1为买，2为卖
	Op    int32    `protobuf:"varint,5,opt,name=op,proto3" json:"op,omitempty"`
	Order *ZkOrder `protobuf:"bytes,6,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *SpotNftOrder) Reset() {
	*x = SpotNftOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotNftOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotNftOrder) ProtoMessage() {}

func (x *SpotNftOrder) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotNftOrder.ProtoReflect.Descriptor instead.
func (*SpotNftOrder) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{6}
}

func (x *SpotNftOrder) GetLeftAsset() uint64 {
	if x != nil {
		return x.LeftAsset
	}
	return 0
}

func (x *SpotNftOrder) GetRightAsset() uint64 {
	if x != nil {
		return x.RightAsset
	}
	return 0
}

func (x *SpotNftOrder) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SpotNftOrder) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SpotNftOrder) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *SpotNftOrder) GetOrder() *ZkOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

// 使用挂单摘单模式, 后摘单
type SpotNftTakerOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//交易对
	OrderID int64    `protobuf:"varint,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	Order   *ZkOrder `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *SpotNftTakerOrder) Reset() {
	*x = SpotNftTakerOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotNftTakerOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotNftTakerOrder) ProtoMessage() {}

func (x *SpotNftTakerOrder) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotNftTakerOrder.ProtoReflect.Descriptor instead.
func (*SpotNftTakerOrder) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{7}
}

func (x *SpotNftTakerOrder) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *SpotNftTakerOrder) GetOrder() *ZkOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

//市价委托
type SpotMarketOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//资产1
	LeftAsset uint32 `protobuf:"varint,1,opt,name=leftAsset,proto3" json:"leftAsset,omitempty"`
	//资产2
	RightAsset uint32 `protobuf:"varint,2,opt,name=rightAsset,proto3" json:"rightAsset,omitempty"`
	//总量
	Amount int64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	//操作， 1为买，2为卖
	Op int32 `protobuf:"varint,4,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *SpotMarketOrder) Reset() {
	*x = SpotMarketOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotMarketOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotMarketOrder) ProtoMessage() {}

func (x *SpotMarketOrder) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotMarketOrder.ProtoReflect.Descriptor instead.
func (*SpotMarketOrder) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{8}
}

func (x *SpotMarketOrder) GetLeftAsset() uint32 {
	if x != nil {
		return x.LeftAsset
	}
	return 0
}

func (x *SpotMarketOrder) GetRightAsset() uint32 {
	if x != nil {
		return x.RightAsset
	}
	return 0
}

func (x *SpotMarketOrder) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SpotMarketOrder) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

type SpotExchangeBind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//交易地址
	ExchangeAddress string `protobuf:"bytes,1,opt,name=exchangeAddress,proto3" json:"exchangeAddress,omitempty"`
	//委托地址
	EntrustAddress string `protobuf:"bytes,2,opt,name=entrustAddress,proto3" json:"entrustAddress,omitempty"`
}

func (x *SpotExchangeBind) Reset() {
	*x = SpotExchangeBind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotExchangeBind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotExchangeBind) ProtoMessage() {}

func (x *SpotExchangeBind) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotExchangeBind.ProtoReflect.Descriptor instead.
func (*SpotExchangeBind) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{9}
}

func (x *SpotExchangeBind) GetExchangeAddress() string {
	if x != nil {
		return x.ExchangeAddress
	}
	return ""
}

func (x *SpotExchangeBind) GetEntrustAddress() string {
	if x != nil {
		return x.EntrustAddress
	}
	return ""
}

//委托限价订单
type SpotEntrustOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//交易对
	LeftAsset uint64 `protobuf:"varint,1,opt,name=leftAsset,proto3" json:"leftAsset,omitempty"`
	//交易对
	RightAsset uint64 `protobuf:"varint,2,opt,name=rightAsset,proto3" json:"rightAsset,omitempty"`
	//价格
	Price int64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	//总量
	Amount int64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	//操作， 1为买，2为卖
	Op int32 `protobuf:"varint,5,opt,name=op,proto3" json:"op,omitempty"`
	//交易地址
	Addr  string   `protobuf:"bytes,6,opt,name=addr,proto3" json:"addr,omitempty"`
	Order *ZkOrder `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *SpotEntrustOrder) Reset() {
	*x = SpotEntrustOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotEntrustOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotEntrustOrder) ProtoMessage() {}

func (x *SpotEntrustOrder) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotEntrustOrder.ProtoReflect.Descriptor instead.
func (*SpotEntrustOrder) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{10}
}

func (x *SpotEntrustOrder) GetLeftAsset() uint64 {
	if x != nil {
		return x.LeftAsset
	}
	return 0
}

func (x *SpotEntrustOrder) GetRightAsset() uint64 {
	if x != nil {
		return x.RightAsset
	}
	return 0
}

func (x *SpotEntrustOrder) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SpotEntrustOrder) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SpotEntrustOrder) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *SpotEntrustOrder) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *SpotEntrustOrder) GetOrder() *ZkOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

//委托撤回订单
type SpotEntrustRevokeOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//订单号
	OrderID int64 `protobuf:"varint,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	//交易地址
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *SpotEntrustRevokeOrder) Reset() {
	*x = SpotEntrustRevokeOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotEntrustRevokeOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotEntrustRevokeOrder) ProtoMessage() {}

func (x *SpotEntrustRevokeOrder) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotEntrustRevokeOrder.ProtoReflect.Descriptor instead.
func (*SpotEntrustRevokeOrder) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{11}
}

func (x *SpotEntrustRevokeOrder) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *SpotEntrustRevokeOrder) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

//撤回订单
type SpotRevokeOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//订单号
	OrderID int64 `protobuf:"varint,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
}

func (x *SpotRevokeOrder) Reset() {
	*x = SpotRevokeOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotRevokeOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotRevokeOrder) ProtoMessage() {}

func (x *SpotRevokeOrder) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotRevokeOrder.ProtoReflect.Descriptor instead.
func (*SpotRevokeOrder) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{12}
}

func (x *SpotRevokeOrder) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

//订单信息
type SpotOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID int64 `protobuf:"varint,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	// Types that are assignable to Value:
	//	*SpotOrder_LimitOrder
	//	*SpotOrder_MarketOrder
	//	*SpotOrder_NftOrder
	//	*SpotOrder_NftTakerOrder
	//	*SpotOrder_AssetLimitOrder
	Value isSpotOrder_Value `protobuf_oneof:"value"`
	//挂单类型
	Ty int32 `protobuf:"varint,4,opt,name=ty,proto3" json:"ty,omitempty"`
	//已经成交的数量
	Executed int64 `protobuf:"varint,5,opt,name=executed,proto3" json:"executed,omitempty"`
	//成交均价
	AVGPrice int64 `protobuf:"varint,6,opt,name=AVG_price,json=AVGPrice,proto3" json:"AVG_price,omitempty"`
	//余额
	Balance int64 `protobuf:"varint,7,opt,name=balance,proto3" json:"balance,omitempty"`
	//状态,0 挂单中ordered， 1 完成completed， 2撤回 revoked
	Status int32 `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	//用户地址
	Addr string `protobuf:"bytes,9,opt,name=addr,proto3" json:"addr,omitempty"`
	//更新时间
	UpdateTime int64 `protobuf:"varint,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	//索引
	Index int64 `protobuf:"varint,11,opt,name=index,proto3" json:"index,omitempty"`
	//手续费率 (挂单)
	Rate int32 `protobuf:"varint,12,opt,name=rate,proto3" json:"rate,omitempty"`
	//手续费
	DigestedFee int64 `protobuf:"varint,13,opt,name=digestedFee,proto3" json:"digestedFee,omitempty"`
	// 主动成交手续费
	TakerRate int32 `protobuf:"varint,14,opt,name=takerRate,proto3" json:"takerRate,omitempty"`
	//挂单hash
	Hash string `protobuf:"bytes,15,opt,name=hash,proto3" json:"hash,omitempty"`
	//撤单hash
	RevokeHash string `protobuf:"bytes,16,opt,name=revokeHash,proto3" json:"revokeHash,omitempty"`
	//创建时间
	CreateTime int64 `protobuf:"varint,17,opt,name=createTime,proto3" json:"createTime,omitempty"`
	//委托地址
	EntrustAddr string `protobuf:"bytes,18,opt,name=entrustAddr,proto3" json:"entrustAddr,omitempty"`
	// frozen fee
	FeeBalance int64 `protobuf:"varint,19,opt,name=feeBalance,proto3" json:"feeBalance,omitempty"`
}

func (x *SpotOrder) Reset() {
	*x = SpotOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotOrder) ProtoMessage() {}

func (x *SpotOrder) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotOrder.ProtoReflect.Descriptor instead.
func (*SpotOrder) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{13}
}

func (x *SpotOrder) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (m *SpotOrder) GetValue() isSpotOrder_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SpotOrder) GetLimitOrder() *SpotLimitOrder {
	if x, ok := x.GetValue().(*SpotOrder_LimitOrder); ok {
		return x.LimitOrder
	}
	return nil
}

func (x *SpotOrder) GetMarketOrder() *SpotMarketOrder {
	if x, ok := x.GetValue().(*SpotOrder_MarketOrder); ok {
		return x.MarketOrder
	}
	return nil
}

func (x *SpotOrder) GetNftOrder() *SpotNftOrder {
	if x, ok := x.GetValue().(*SpotOrder_NftOrder); ok {
		return x.NftOrder
	}
	return nil
}

func (x *SpotOrder) GetNftTakerOrder() *SpotNftTakerOrder {
	if x, ok := x.GetValue().(*SpotOrder_NftTakerOrder); ok {
		return x.NftTakerOrder
	}
	return nil
}

func (x *SpotOrder) GetAssetLimitOrder() *AssetLimitOrder {
	if x, ok := x.GetValue().(*SpotOrder_AssetLimitOrder); ok {
		return x.AssetLimitOrder
	}
	return nil
}

func (x *SpotOrder) GetTy() int32 {
	if x != nil {
		return x.Ty
	}
	return 0
}

func (x *SpotOrder) GetExecuted() int64 {
	if x != nil {
		return x.Executed
	}
	return 0
}

func (x *SpotOrder) GetAVGPrice() int64 {
	if x != nil {
		return x.AVGPrice
	}
	return 0
}

func (x *SpotOrder) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *SpotOrder) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SpotOrder) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *SpotOrder) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *SpotOrder) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SpotOrder) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *SpotOrder) GetDigestedFee() int64 {
	if x != nil {
		return x.DigestedFee
	}
	return 0
}

func (x *SpotOrder) GetTakerRate() int32 {
	if x != nil {
		return x.TakerRate
	}
	return 0
}

func (x *SpotOrder) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *SpotOrder) GetRevokeHash() string {
	if x != nil {
		return x.RevokeHash
	}
	return ""
}

func (x *SpotOrder) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SpotOrder) GetEntrustAddr() string {
	if x != nil {
		return x.EntrustAddr
	}
	return ""
}

func (x *SpotOrder) GetFeeBalance() int64 {
	if x != nil {
		return x.FeeBalance
	}
	return 0
}

type isSpotOrder_Value interface {
	isSpotOrder_Value()
}

type SpotOrder_LimitOrder struct {
	LimitOrder *SpotLimitOrder `protobuf:"bytes,2,opt,name=limitOrder,proto3,oneof"`
}

type SpotOrder_MarketOrder struct {
	MarketOrder *SpotMarketOrder `protobuf:"bytes,3,opt,name=marketOrder,proto3,oneof"`
}

type SpotOrder_NftOrder struct {
	NftOrder *SpotNftOrder `protobuf:"bytes,20,opt,name=nftOrder,proto3,oneof"`
}

type SpotOrder_NftTakerOrder struct {
	NftTakerOrder *SpotNftTakerOrder `protobuf:"bytes,21,opt,name=nftTakerOrder,proto3,oneof"`
}

type SpotOrder_AssetLimitOrder struct {
	AssetLimitOrder *AssetLimitOrder `protobuf:"bytes,22,opt,name=assetLimitOrder,proto3,oneof"`
}

func (*SpotOrder_LimitOrder) isSpotOrder_Value() {}

func (*SpotOrder_MarketOrder) isSpotOrder_Value() {}

func (*SpotOrder_NftOrder) isSpotOrder_Value() {}

func (*SpotOrder_NftTakerOrder) isSpotOrder_Value() {}

func (*SpotOrder_AssetLimitOrder) isSpotOrder_Value() {}

//查询接口
type SpotQueryMarketDepth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//资产1
	LeftAsset uint64 `protobuf:"varint,1,opt,name=leftAsset,proto3" json:"leftAsset,omitempty"`
	//资产2
	RightAsset uint64 `protobuf:"varint,2,opt,name=rightAsset,proto3" json:"rightAsset,omitempty"`
	//操作， 1为买，2为卖
	Op int32 `protobuf:"varint,3,opt,name=op,proto3" json:"op,omitempty"`
	// 这里用价格作为索引值
	PrimaryKey string `protobuf:"bytes,4,opt,name=primaryKey,proto3" json:"primaryKey,omitempty"`
	//单页返回多少条记录，默认返回10条,为了系统安全最多单次只能返回20条
	Count int32 `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *SpotQueryMarketDepth) Reset() {
	*x = SpotQueryMarketDepth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotQueryMarketDepth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotQueryMarketDepth) ProtoMessage() {}

func (x *SpotQueryMarketDepth) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotQueryMarketDepth.ProtoReflect.Descriptor instead.
func (*SpotQueryMarketDepth) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{14}
}

func (x *SpotQueryMarketDepth) GetLeftAsset() uint64 {
	if x != nil {
		return x.LeftAsset
	}
	return 0
}

func (x *SpotQueryMarketDepth) GetRightAsset() uint64 {
	if x != nil {
		return x.RightAsset
	}
	return 0
}

func (x *SpotQueryMarketDepth) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *SpotQueryMarketDepth) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

func (x *SpotQueryMarketDepth) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

//市场深度
type SpotMarketDepth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//资产1
	LeftAsset uint64 `protobuf:"varint,1,opt,name=leftAsset,proto3" json:"leftAsset,omitempty"`
	//资产2
	RightAsset uint64 `protobuf:"varint,2,opt,name=rightAsset,proto3" json:"rightAsset,omitempty"`
	//价格
	Price int64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	//总量
	Amount int64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	//操作， 1为买，2为卖
	Op int32 `protobuf:"varint,5,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *SpotMarketDepth) Reset() {
	*x = SpotMarketDepth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotMarketDepth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotMarketDepth) ProtoMessage() {}

func (x *SpotMarketDepth) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotMarketDepth.ProtoReflect.Descriptor instead.
func (*SpotMarketDepth) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{15}
}

func (x *SpotMarketDepth) GetLeftAsset() uint64 {
	if x != nil {
		return x.LeftAsset
	}
	return 0
}

func (x *SpotMarketDepth) GetRightAsset() uint64 {
	if x != nil {
		return x.RightAsset
	}
	return 0
}

func (x *SpotMarketDepth) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SpotMarketDepth) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SpotMarketDepth) GetOp() int32 {
	if x != nil {
		return x.Op
	}
	return 0
}

//查询接口返回的市场深度列表
type SpotMarketDepthList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*SpotMarketDepth `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	PrimaryKey string             `protobuf:"bytes,2,opt,name=primaryKey,proto3" json:"primaryKey,omitempty"`
}

func (x *SpotMarketDepthList) Reset() {
	*x = SpotMarketDepthList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotMarketDepthList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotMarketDepthList) ProtoMessage() {}

func (x *SpotMarketDepthList) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotMarketDepthList.ProtoReflect.Descriptor instead.
func (*SpotMarketDepthList) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{16}
}

func (x *SpotMarketDepthList) GetList() []*SpotMarketDepth {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *SpotMarketDepthList) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

//查询最新得成交信息,外部接口
type SpotQueryHistoryOrderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//资产1
	LeftAsset uint64 `protobuf:"varint,1,opt,name=leftAsset,proto3" json:"leftAsset,omitempty"`
	//资产2
	RightAsset uint64 `protobuf:"varint,2,opt,name=rightAsset,proto3" json:"rightAsset,omitempty"`
	// 索引值
	PrimaryKey string `protobuf:"bytes,3,opt,name=primaryKey,proto3" json:"primaryKey,omitempty"`
	//单页返回多少条记录，默认返回10条,为了系统安全最多单次只能返回20条
	Count int32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// 0降序，1升序，默认降序
	Direction int32 `protobuf:"varint,5,opt,name=direction,proto3" json:"direction,omitempty"`
}

func (x *SpotQueryHistoryOrderList) Reset() {
	*x = SpotQueryHistoryOrderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotQueryHistoryOrderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotQueryHistoryOrderList) ProtoMessage() {}

func (x *SpotQueryHistoryOrderList) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotQueryHistoryOrderList.ProtoReflect.Descriptor instead.
func (*SpotQueryHistoryOrderList) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{17}
}

func (x *SpotQueryHistoryOrderList) GetLeftAsset() uint64 {
	if x != nil {
		return x.LeftAsset
	}
	return 0
}

func (x *SpotQueryHistoryOrderList) GetRightAsset() uint64 {
	if x != nil {
		return x.RightAsset
	}
	return 0
}

func (x *SpotQueryHistoryOrderList) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

func (x *SpotQueryHistoryOrderList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SpotQueryHistoryOrderList) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

//根据orderID去查询订单信息
type SpotQueryOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID int64 `protobuf:"varint,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
}

func (x *SpotQueryOrder) Reset() {
	*x = SpotQueryOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotQueryOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotQueryOrder) ProtoMessage() {}

func (x *SpotQueryOrder) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotQueryOrder.ProtoReflect.Descriptor instead.
func (*SpotQueryOrder) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{18}
}

func (x *SpotQueryOrder) GetOrderID() int64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

//根据地址，状态查询用户自己的挂单信息
type SpotQueryOrderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//挂单状态必填(默认是0,只查询ordered挂单中的)
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	//用户地址信息，必填
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// 主键索引
	PrimaryKey string `protobuf:"bytes,3,opt,name=primaryKey,proto3" json:"primaryKey,omitempty"`
	//单页返回多少条记录，默认返回10条,为了系统安全最多单次只能返回20条
	Count int32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// 0降序，1升序，默认降序
	Direction int32 `protobuf:"varint,5,opt,name=direction,proto3" json:"direction,omitempty"`
}

func (x *SpotQueryOrderList) Reset() {
	*x = SpotQueryOrderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotQueryOrderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotQueryOrderList) ProtoMessage() {}

func (x *SpotQueryOrderList) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotQueryOrderList.ProtoReflect.Descriptor instead.
func (*SpotQueryOrderList) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{19}
}

func (x *SpotQueryOrderList) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SpotQueryOrderList) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SpotQueryOrderList) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

func (x *SpotQueryOrderList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SpotQueryOrderList) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

//订单列表
type SpotOrderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*SpotOrder `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	PrimaryKey string       `protobuf:"bytes,2,opt,name=primaryKey,proto3" json:"primaryKey,omitempty"`
}

func (x *SpotOrderList) Reset() {
	*x = SpotOrderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotOrderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotOrderList) ProtoMessage() {}

func (x *SpotOrderList) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotOrderList.ProtoReflect.Descriptor instead.
func (*SpotOrderList) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{20}
}

func (x *SpotOrderList) GetList() []*SpotOrder {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *SpotOrderList) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

// exchange执行票据日志
type ReceiptSpotMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order       *SpotOrder   `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	MatchOrders []*SpotOrder `protobuf:"bytes,2,rep,name=matchOrders,proto3" json:"matchOrders,omitempty"`
	Index       int64        `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *ReceiptSpotMatch) Reset() {
	*x = ReceiptSpotMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptSpotMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptSpotMatch) ProtoMessage() {}

func (x *ReceiptSpotMatch) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptSpotMatch.ProtoReflect.Descriptor instead.
func (*ReceiptSpotMatch) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{21}
}

func (x *ReceiptSpotMatch) GetOrder() *SpotOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *ReceiptSpotMatch) GetMatchOrders() []*SpotOrder {
	if x != nil {
		return x.MatchOrders
	}
	return nil
}

func (x *ReceiptSpotMatch) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ReceiptDexBind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//交易地址
	ExchangeAddress string `protobuf:"bytes,1,opt,name=exchangeAddress,proto3" json:"exchangeAddress,omitempty"`
	//委托地址
	NewEntrustAddress string `protobuf:"bytes,2,opt,name=newEntrustAddress,proto3" json:"newEntrustAddress,omitempty"`
	//委托地址
	OldEntrustAddress string `protobuf:"bytes,3,opt,name=oldEntrustAddress,proto3" json:"oldEntrustAddress,omitempty"`
}

func (x *ReceiptDexBind) Reset() {
	*x = ReceiptDexBind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptDexBind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptDexBind) ProtoMessage() {}

func (x *ReceiptDexBind) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptDexBind.ProtoReflect.Descriptor instead.
func (*ReceiptDexBind) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{22}
}

func (x *ReceiptDexBind) GetExchangeAddress() string {
	if x != nil {
		return x.ExchangeAddress
	}
	return ""
}

func (x *ReceiptDexBind) GetNewEntrustAddress() string {
	if x != nil {
		return x.NewEntrustAddress
	}
	return ""
}

func (x *ReceiptDexBind) GetOldEntrustAddress() string {
	if x != nil {
		return x.OldEntrustAddress
	}
	return ""
}

// 每种代币的数量
type DexAccountBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// token id
	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Balance uint64 `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
	Frozen  uint64 `protobuf:"varint,3,opt,name=frozen,proto3" json:"frozen,omitempty"`
}

func (x *DexAccountBalance) Reset() {
	*x = DexAccountBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DexAccountBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexAccountBalance) ProtoMessage() {}

func (x *DexAccountBalance) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexAccountBalance.ProtoReflect.Descriptor instead.
func (*DexAccountBalance) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{23}
}

func (x *DexAccountBalance) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DexAccountBalance) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *DexAccountBalance) GetFrozen() uint64 {
	if x != nil {
		return x.Frozen
	}
	return 0
}

// 用户代币的数量
type DexAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Addr    string               `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Balance []*DexAccountBalance `protobuf:"bytes,3,rep,name=balance,proto3" json:"balance,omitempty"`
	DexName string               `protobuf:"bytes,4,opt,name=dexName,proto3" json:"dexName,omitempty"`
}

func (x *DexAccount) Reset() {
	*x = DexAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DexAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexAccount) ProtoMessage() {}

func (x *DexAccount) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexAccount.ProtoReflect.Descriptor instead.
func (*DexAccount) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{24}
}

func (x *DexAccount) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DexAccount) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *DexAccount) GetBalance() []*DexAccountBalance {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *DexAccount) GetDexName() string {
	if x != nil {
		return x.DexName
	}
	return ""
}

type TradeAccounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Taker *DexAccount `protobuf:"bytes,1,opt,name=taker,proto3" json:"taker,omitempty"`
	Maker *DexAccount `protobuf:"bytes,2,opt,name=maker,proto3" json:"maker,omitempty"`
	Fee   *DexAccount `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *TradeAccounts) Reset() {
	*x = TradeAccounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeAccounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeAccounts) ProtoMessage() {}

func (x *TradeAccounts) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeAccounts.ProtoReflect.Descriptor instead.
func (*TradeAccounts) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{25}
}

func (x *TradeAccounts) GetTaker() *DexAccount {
	if x != nil {
		return x.Taker
	}
	return nil
}

func (x *TradeAccounts) GetMaker() *DexAccount {
	if x != nil {
		return x.Maker
	}
	return nil
}

func (x *TradeAccounts) GetFee() *DexAccount {
	if x != nil {
		return x.Fee
	}
	return nil
}

type MatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// trade match balance
	Matched     int64 `protobuf:"varint,1,opt,name=matched,proto3" json:"matched,omitempty"`
	LeftBalance int64 `protobuf:"varint,2,opt,name=leftBalance,proto3" json:"leftBalance,omitempty"`
	// = matched * price
	RightBalance int64 `protobuf:"varint,3,opt,name=rightBalance,proto3" json:"rightBalance,omitempty"`
	// fee use right token
	FeeTaker int64 `protobuf:"varint,4,opt,name=feeTaker,proto3" json:"feeTaker,omitempty"`
	FeeMaker int64 `protobuf:"varint,5,opt,name=feeMaker,proto3" json:"feeMaker,omitempty"`
	Price    int64 `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *MatchInfo) Reset() {
	*x = MatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInfo) ProtoMessage() {}

func (x *MatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInfo.ProtoReflect.Descriptor instead.
func (*MatchInfo) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{26}
}

func (x *MatchInfo) GetMatched() int64 {
	if x != nil {
		return x.Matched
	}
	return 0
}

func (x *MatchInfo) GetLeftBalance() int64 {
	if x != nil {
		return x.LeftBalance
	}
	return 0
}

func (x *MatchInfo) GetRightBalance() int64 {
	if x != nil {
		return x.RightBalance
	}
	return 0
}

func (x *MatchInfo) GetFeeTaker() int64 {
	if x != nil {
		return x.FeeTaker
	}
	return 0
}

func (x *MatchInfo) GetFeeMaker() int64 {
	if x != nil {
		return x.FeeMaker
	}
	return 0
}

func (x *MatchInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type ReceiptSpotTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match   *MatchInfo     `protobuf:"bytes,1,opt,name=Match,proto3" json:"Match,omitempty"`
	Prev    *TradeAccounts `protobuf:"bytes,2,opt,name=prev,proto3" json:"prev,omitempty"`
	Current *TradeAccounts `protobuf:"bytes,3,opt,name=current,proto3" json:"current,omitempty"`
	// 加入zk order, 在电路验证需要
	MakerOrder *ZkOrder `protobuf:"bytes,4,opt,name=makerOrder,proto3" json:"makerOrder,omitempty"`
}

func (x *ReceiptSpotTrade) Reset() {
	*x = ReceiptSpotTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptSpotTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptSpotTrade) ProtoMessage() {}

func (x *ReceiptSpotTrade) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptSpotTrade.ProtoReflect.Descriptor instead.
func (*ReceiptSpotTrade) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{27}
}

func (x *ReceiptSpotTrade) GetMatch() *MatchInfo {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *ReceiptSpotTrade) GetPrev() *TradeAccounts {
	if x != nil {
		return x.Prev
	}
	return nil
}

func (x *ReceiptSpotTrade) GetCurrent() *TradeAccounts {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *ReceiptSpotTrade) GetMakerOrder() *ZkOrder {
	if x != nil {
		return x.MakerOrder
	}
	return nil
}

type ReceiptDexAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prev    *DexAccount `protobuf:"bytes,1,opt,name=prev,proto3" json:"prev,omitempty"`
	Current *DexAccount `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *ReceiptDexAccount) Reset() {
	*x = ReceiptDexAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spot_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptDexAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptDexAccount) ProtoMessage() {}

func (x *ReceiptDexAccount) ProtoReflect() protoreflect.Message {
	mi := &file_spot_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptDexAccount.ProtoReflect.Descriptor instead.
func (*ReceiptDexAccount) Descriptor() ([]byte, []int) {
	return file_spot_proto_rawDescGZIP(), []int{28}
}

func (x *ReceiptDexAccount) GetPrev() *DexAccount {
	if x != nil {
		return x.Prev
	}
	return nil
}

func (x *ReceiptDexAccount) GetCurrent() *DexAccount {
	if x != nil {
		return x.Current
	}
	return nil
}

var File_spot_proto protoreflect.FileDescriptor

var file_spot_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x1a, 0x0d, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa5, 0x03, 0x0a, 0x0a, 0x53, 0x70, 0x6f, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70,
	0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x70, 0x6f, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x53, 0x70, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x4f, 0x0a, 0x12, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x65,
	0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74,
	0x79, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3c, 0x0a, 0x0a, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x65, 0x63,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x65, 0x63, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xa5, 0x01, 0x0a, 0x05, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x20, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x02, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x09, 0x7a, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x7a, 0x6b, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x65, 0x76, 0x6d,
	0x4e, 0x66, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x65,
	0x76, 0x6d, 0x4e, 0x66, 0x74, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xe9, 0x02, 0x0a, 0x07, 0x5a, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74,
	0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x75, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x75, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x32, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x32, 0x12, 0x36, 0x0a, 0x0d,
	0x73, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x75,
	0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb2, 0x01, 0x0a,
	0x0e, 0x53, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x24, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0xcf, 0x01, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x24, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0xb0, 0x01, 0x0a, 0x0c, 0x53, 0x70, 0x6f, 0x74, 0x4e, 0x66, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x70,
	0x12, 0x24, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x11, 0x53, 0x70, 0x6f, 0x74, 0x4e, 0x66,
	0x74, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x77, 0x0a, 0x0f, 0x53,
	0x70, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x6f, 0x70, 0x22, 0x64, 0x0a, 0x10, 0x53, 0x70, 0x6f, 0x74, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x10, 0x53,
	0x70, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12,
	0x24, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x46, 0x0a, 0x16, 0x53, 0x70, 0x6f, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x22, 0x2b, 0x0a,
	0x0f, 0x53, 0x70, 0x6f, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x8b, 0x06, 0x0a, 0x09, 0x53,
	0x70, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x70, 0x6f, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x6e, 0x66, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4e, 0x66, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x08, 0x6e, 0x66, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x6e, 0x66,
	0x74, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4e, 0x66,
	0x74, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x6e,
	0x66, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x41, 0x56, 0x47, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x41, 0x56, 0x47, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x53, 0x70, 0x6f,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x70, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x0f, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x66,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x65,
	0x66, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x6f, 0x70, 0x22, 0x61, 0x0a, 0x13, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x19, 0x53, 0x70, 0x6f,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x0e, 0x53, 0x70, 0x6f, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x53, 0x70, 0x6f, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x55, 0x0a, 0x0d, 0x53, 0x70, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x96, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x65, 0x78, 0x42, 0x69,
	0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x6e, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x6c,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x55, 0x0a, 0x11, 0x44, 0x65, 0x78, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x22,
	0x7e, 0x0a, 0x0a, 0x44, 0x65, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x12, 0x32, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x78, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x86, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x27, 0x0a, 0x05, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x78, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x05, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x44, 0x65, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x78, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x54, 0x61, 0x6b,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x65, 0x65, 0x54, 0x61, 0x6b,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x65, 0x65, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x53, 0x70, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x72, 0x65, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x04, 0x70, 0x72, 0x65, 0x76, 0x12, 0x2e, 0x0a, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x0a, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x67, 0x0a, 0x11, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x65, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x04, 0x70, 0x72, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x04, 0x70, 0x72, 0x65, 0x76, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x44, 0x65, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x2a, 0x46, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x4c, 0x31, 0x45, 0x72, 0x63, 0x32, 0x30, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x5a, 0x6b, 0x4e, 0x66, 0x74, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x45, 0x76, 0x6d, 0x4e, 0x66, 0x74, 0x10, 0x04, 0x32, 0x08, 0x0a, 0x06,
	0x7a, 0x6b, 0x73, 0x70, 0x6f, 0x74, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x33, 0x33, 0x63, 0x6e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x64, 0x61, 0x70, 0x70, 0x2f, 0x7a, 0x6b, 0x73,
	0x70, 0x6f, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_spot_proto_rawDescOnce sync.Once
	file_spot_proto_rawDescData = file_spot_proto_rawDesc
)

func file_spot_proto_rawDescGZIP() []byte {
	file_spot_proto_rawDescOnce.Do(func() {
		file_spot_proto_rawDescData = protoimpl.X.CompressGZIP(file_spot_proto_rawDescData)
	})
	return file_spot_proto_rawDescData
}

var file_spot_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spot_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_spot_proto_goTypes = []interface{}{
	(AssetType)(0),                    // 0: types.AssetType
	(*SpotAction)(nil),                // 1: types.SpotAction
	(*TokenAsset)(nil),                // 2: types.TokenAsset
	(*Asset)(nil),                     // 3: types.Asset
	(*ZkOrder)(nil),                   // 4: types.ZkOrder
	(*SpotLimitOrder)(nil),            // 5: types.SpotLimitOrder
	(*AssetLimitOrder)(nil),           // 6: types.AssetLimitOrder
	(*SpotNftOrder)(nil),              // 7: types.SpotNftOrder
	(*SpotNftTakerOrder)(nil),         // 8: types.SpotNftTakerOrder
	(*SpotMarketOrder)(nil),           // 9: types.SpotMarketOrder
	(*SpotExchangeBind)(nil),          // 10: types.SpotExchangeBind
	(*SpotEntrustOrder)(nil),          // 11: types.SpotEntrustOrder
	(*SpotEntrustRevokeOrder)(nil),    // 12: types.SpotEntrustRevokeOrder
	(*SpotRevokeOrder)(nil),           // 13: types.SpotRevokeOrder
	(*SpotOrder)(nil),                 // 14: types.SpotOrder
	(*SpotQueryMarketDepth)(nil),      // 15: types.SpotQueryMarketDepth
	(*SpotMarketDepth)(nil),           // 16: types.SpotMarketDepth
	(*SpotMarketDepthList)(nil),       // 17: types.SpotMarketDepthList
	(*SpotQueryHistoryOrderList)(nil), // 18: types.SpotQueryHistoryOrderList
	(*SpotQueryOrder)(nil),            // 19: types.SpotQueryOrder
	(*SpotQueryOrderList)(nil),        // 20: types.SpotQueryOrderList
	(*SpotOrderList)(nil),             // 21: types.SpotOrderList
	(*ReceiptSpotMatch)(nil),          // 22: types.ReceiptSpotMatch
	(*ReceiptDexBind)(nil),            // 23: types.ReceiptDexBind
	(*DexAccountBalance)(nil),         // 24: types.DexAccountBalance
	(*DexAccount)(nil),                // 25: types.DexAccount
	(*TradeAccounts)(nil),             // 26: types.TradeAccounts
	(*MatchInfo)(nil),                 // 27: types.MatchInfo
	(*ReceiptSpotTrade)(nil),          // 28: types.ReceiptSpotTrade
	(*ReceiptDexAccount)(nil),         // 29: types.ReceiptDexAccount
	(*types.ZkSignature)(nil),         // 30: types.ZkSignature
}
var file_spot_proto_depIdxs = []int32{
	5,  // 0: types.SpotAction.limitOrder:type_name -> types.SpotLimitOrder
	9,  // 1: types.SpotAction.marketOrder:type_name -> types.SpotMarketOrder
	13, // 2: types.SpotAction.revokeOrder:type_name -> types.SpotRevokeOrder
	10, // 3: types.SpotAction.exchangeBind:type_name -> types.SpotExchangeBind
	11, // 4: types.SpotAction.entrustOrder:type_name -> types.SpotEntrustOrder
	12, // 5: types.SpotAction.entrustRevokeOrder:type_name -> types.SpotEntrustRevokeOrder
	0,  // 6: types.Asset.ty:type_name -> types.AssetType
	2,  // 7: types.Asset.tokenAsset:type_name -> types.TokenAsset
	0,  // 8: types.ZkOrder.sellAssetType:type_name -> types.AssetType
	0,  // 9: types.ZkOrder.buyAssetType:type_name -> types.AssetType
	30, // 10: types.ZkOrder.signature:type_name -> types.ZkSignature
	4,  // 11: types.SpotLimitOrder.order:type_name -> types.ZkOrder
	3,  // 12: types.AssetLimitOrder.leftAsset:type_name -> types.Asset
	3,  // 13: types.AssetLimitOrder.rightAsset:type_name -> types.Asset
	4,  // 14: types.AssetLimitOrder.order:type_name -> types.ZkOrder
	4,  // 15: types.SpotNftOrder.order:type_name -> types.ZkOrder
	4,  // 16: types.SpotNftTakerOrder.order:type_name -> types.ZkOrder
	4,  // 17: types.SpotEntrustOrder.order:type_name -> types.ZkOrder
	5,  // 18: types.SpotOrder.limitOrder:type_name -> types.SpotLimitOrder
	9,  // 19: types.SpotOrder.marketOrder:type_name -> types.SpotMarketOrder
	7,  // 20: types.SpotOrder.nftOrder:type_name -> types.SpotNftOrder
	8,  // 21: types.SpotOrder.nftTakerOrder:type_name -> types.SpotNftTakerOrder
	6,  // 22: types.SpotOrder.assetLimitOrder:type_name -> types.AssetLimitOrder
	16, // 23: types.SpotMarketDepthList.list:type_name -> types.SpotMarketDepth
	14, // 24: types.SpotOrderList.list:type_name -> types.SpotOrder
	14, // 25: types.ReceiptSpotMatch.order:type_name -> types.SpotOrder
	14, // 26: types.ReceiptSpotMatch.matchOrders:type_name -> types.SpotOrder
	24, // 27: types.DexAccount.balance:type_name -> types.DexAccountBalance
	25, // 28: types.TradeAccounts.taker:type_name -> types.DexAccount
	25, // 29: types.TradeAccounts.maker:type_name -> types.DexAccount
	25, // 30: types.TradeAccounts.fee:type_name -> types.DexAccount
	27, // 31: types.ReceiptSpotTrade.Match:type_name -> types.MatchInfo
	26, // 32: types.ReceiptSpotTrade.prev:type_name -> types.TradeAccounts
	26, // 33: types.ReceiptSpotTrade.current:type_name -> types.TradeAccounts
	4,  // 34: types.ReceiptSpotTrade.makerOrder:type_name -> types.ZkOrder
	25, // 35: types.ReceiptDexAccount.prev:type_name -> types.DexAccount
	25, // 36: types.ReceiptDexAccount.current:type_name -> types.DexAccount
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_spot_proto_init() }
func file_spot_proto_init() {
	if File_spot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotLimitOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetLimitOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotNftOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotNftTakerOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotMarketOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotExchangeBind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotEntrustOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotEntrustRevokeOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotRevokeOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotQueryMarketDepth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotMarketDepth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotMarketDepthList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotQueryHistoryOrderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotQueryOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotQueryOrderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotOrderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptSpotMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptDexBind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DexAccountBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DexAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeAccounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptSpotTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spot_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptDexAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_spot_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SpotAction_LimitOrder)(nil),
		(*SpotAction_MarketOrder)(nil),
		(*SpotAction_RevokeOrder)(nil),
		(*SpotAction_ExchangeBind)(nil),
		(*SpotAction_EntrustOrder)(nil),
		(*SpotAction_EntrustRevokeOrder)(nil),
	}
	file_spot_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Asset_ZkAssetid)(nil),
		(*Asset_TokenAsset)(nil),
		(*Asset_EvmNftID)(nil),
	}
	file_spot_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*SpotOrder_LimitOrder)(nil),
		(*SpotOrder_MarketOrder)(nil),
		(*SpotOrder_NftOrder)(nil),
		(*SpotOrder_NftTakerOrder)(nil),
		(*SpotOrder_AssetLimitOrder)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spot_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spot_proto_goTypes,
		DependencyIndexes: file_spot_proto_depIdxs,
		EnumInfos:         file_spot_proto_enumTypes,
		MessageInfos:      file_spot_proto_msgTypes,
	}.Build()
	File_spot_proto = out.File
	file_spot_proto_rawDesc = nil
	file_spot_proto_goTypes = nil
	file_spot_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ZkspotClient is the client API for Zkspot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZkspotClient interface {
}

type zkspotClient struct {
	cc grpc.ClientConnInterface
}

func NewZkspotClient(cc grpc.ClientConnInterface) ZkspotClient {
	return &zkspotClient{cc}
}

// ZkspotServer is the server API for Zkspot service.
type ZkspotServer interface {
}

// UnimplementedZkspotServer can be embedded to have forward compatible implementations.
type UnimplementedZkspotServer struct {
}

func RegisterZkspotServer(s *grpc.Server, srv ZkspotServer) {
	s.RegisterService(&_Zkspot_serviceDesc, srv)
}

var _Zkspot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.zkspot",
	HandlerType: (*ZkspotServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "spot.proto",
}
