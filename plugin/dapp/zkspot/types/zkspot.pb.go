// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.5.0
// source: zkspot.proto

package types

import (
	types "github.com/33cn/plugin/plugin/dapp/zksync/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ZksyncAction1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ty int32 `protobuf:"varint,1,opt,name=ty,proto3" json:"ty,omitempty"`
	// Types that are assignable to Value:
	//	*ZksyncAction1_Withdraw
	//	*ZksyncAction1_ContractToTree
	//	*ZksyncAction1_TreeToContract
	//	*ZksyncAction1_Transfer
	//	*ZksyncAction1_TransferToNew
	//	*ZksyncAction1_ForceExit
	//	*ZksyncAction1_SetPubKey
	//	*ZksyncAction1_FullExit
	//	*ZksyncAction1_Swap
	//	*ZksyncAction1_SetVerifyKey
	//	*ZksyncAction1_CommitProof
	//	*ZksyncAction1_SetVerifier
	//	*ZksyncAction1_Deposit
	//	*ZksyncAction1_SetFee
	//	*ZksyncAction1_MintNFT
	//	*ZksyncAction1_WithdrawNFT
	//	*ZksyncAction1_TransferNFT
	//	*ZksyncAction1_LimitOrder
	//	*ZksyncAction1_MarketOrder
	//	*ZksyncAction1_RevokeOrder
	//	*ZksyncAction1_ExchangeBind
	//	*ZksyncAction1_EntrustOrder
	//	*ZksyncAction1_EntrustRevokeOrder
	//	*ZksyncAction1_NftOrder
	//	*ZksyncAction1_NftTakerOrder
	//	*ZksyncAction1_NftOrder2
	//	*ZksyncAction1_NftTakerOrder2
	//	*ZksyncAction1_AssetLimitOrder
	Value isZksyncAction1_Value `protobuf_oneof:"value"`
}

func (x *ZksyncAction1) Reset() {
	*x = ZksyncAction1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkspot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZksyncAction1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZksyncAction1) ProtoMessage() {}

func (x *ZksyncAction1) ProtoReflect() protoreflect.Message {
	mi := &file_zkspot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZksyncAction1.ProtoReflect.Descriptor instead.
func (*ZksyncAction1) Descriptor() ([]byte, []int) {
	return file_zkspot_proto_rawDescGZIP(), []int{0}
}

func (x *ZksyncAction1) GetTy() int32 {
	if x != nil {
		return x.Ty
	}
	return 0
}

func (m *ZksyncAction1) GetValue() isZksyncAction1_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ZksyncAction1) GetWithdraw() *types.ZkWithdraw {
	if x, ok := x.GetValue().(*ZksyncAction1_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (x *ZksyncAction1) GetContractToTree() *types.ZkContractToTree {
	if x, ok := x.GetValue().(*ZksyncAction1_ContractToTree); ok {
		return x.ContractToTree
	}
	return nil
}

func (x *ZksyncAction1) GetTreeToContract() *types.ZkTreeToContract {
	if x, ok := x.GetValue().(*ZksyncAction1_TreeToContract); ok {
		return x.TreeToContract
	}
	return nil
}

func (x *ZksyncAction1) GetTransfer() *types.ZkTransfer {
	if x, ok := x.GetValue().(*ZksyncAction1_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *ZksyncAction1) GetTransferToNew() *types.ZkTransferToNew {
	if x, ok := x.GetValue().(*ZksyncAction1_TransferToNew); ok {
		return x.TransferToNew
	}
	return nil
}

func (x *ZksyncAction1) GetForceExit() *types.ZkForceExit {
	if x, ok := x.GetValue().(*ZksyncAction1_ForceExit); ok {
		return x.ForceExit
	}
	return nil
}

func (x *ZksyncAction1) GetSetPubKey() *types.ZkSetPubKey {
	if x, ok := x.GetValue().(*ZksyncAction1_SetPubKey); ok {
		return x.SetPubKey
	}
	return nil
}

func (x *ZksyncAction1) GetFullExit() *types.ZkFullExit {
	if x, ok := x.GetValue().(*ZksyncAction1_FullExit); ok {
		return x.FullExit
	}
	return nil
}

func (x *ZksyncAction1) GetSwap() *types.ZkSwap {
	if x, ok := x.GetValue().(*ZksyncAction1_Swap); ok {
		return x.Swap
	}
	return nil
}

func (x *ZksyncAction1) GetSetVerifyKey() *types.ZkVerifyKey {
	if x, ok := x.GetValue().(*ZksyncAction1_SetVerifyKey); ok {
		return x.SetVerifyKey
	}
	return nil
}

func (x *ZksyncAction1) GetCommitProof() *types.ZkCommitProof {
	if x, ok := x.GetValue().(*ZksyncAction1_CommitProof); ok {
		return x.CommitProof
	}
	return nil
}

func (x *ZksyncAction1) GetSetVerifier() *types.ZkVerifier {
	if x, ok := x.GetValue().(*ZksyncAction1_SetVerifier); ok {
		return x.SetVerifier
	}
	return nil
}

func (x *ZksyncAction1) GetDeposit() *types.ZkDeposit {
	if x, ok := x.GetValue().(*ZksyncAction1_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (x *ZksyncAction1) GetSetFee() *types.ZkSetFee {
	if x, ok := x.GetValue().(*ZksyncAction1_SetFee); ok {
		return x.SetFee
	}
	return nil
}

func (x *ZksyncAction1) GetMintNFT() *types.ZkMintNFT {
	if x, ok := x.GetValue().(*ZksyncAction1_MintNFT); ok {
		return x.MintNFT
	}
	return nil
}

func (x *ZksyncAction1) GetWithdrawNFT() *types.ZkWithdrawNFT {
	if x, ok := x.GetValue().(*ZksyncAction1_WithdrawNFT); ok {
		return x.WithdrawNFT
	}
	return nil
}

func (x *ZksyncAction1) GetTransferNFT() *types.ZkTransferNFT {
	if x, ok := x.GetValue().(*ZksyncAction1_TransferNFT); ok {
		return x.TransferNFT
	}
	return nil
}

func (x *ZksyncAction1) GetLimitOrder() *SpotLimitOrder {
	if x, ok := x.GetValue().(*ZksyncAction1_LimitOrder); ok {
		return x.LimitOrder
	}
	return nil
}

func (x *ZksyncAction1) GetMarketOrder() *SpotMarketOrder {
	if x, ok := x.GetValue().(*ZksyncAction1_MarketOrder); ok {
		return x.MarketOrder
	}
	return nil
}

func (x *ZksyncAction1) GetRevokeOrder() *SpotRevokeOrder {
	if x, ok := x.GetValue().(*ZksyncAction1_RevokeOrder); ok {
		return x.RevokeOrder
	}
	return nil
}

func (x *ZksyncAction1) GetExchangeBind() *SpotExchangeBind {
	if x, ok := x.GetValue().(*ZksyncAction1_ExchangeBind); ok {
		return x.ExchangeBind
	}
	return nil
}

func (x *ZksyncAction1) GetEntrustOrder() *SpotEntrustOrder {
	if x, ok := x.GetValue().(*ZksyncAction1_EntrustOrder); ok {
		return x.EntrustOrder
	}
	return nil
}

func (x *ZksyncAction1) GetEntrustRevokeOrder() *SpotEntrustRevokeOrder {
	if x, ok := x.GetValue().(*ZksyncAction1_EntrustRevokeOrder); ok {
		return x.EntrustRevokeOrder
	}
	return nil
}

func (x *ZksyncAction1) GetNftOrder() *SpotNftOrder {
	if x, ok := x.GetValue().(*ZksyncAction1_NftOrder); ok {
		return x.NftOrder
	}
	return nil
}

func (x *ZksyncAction1) GetNftTakerOrder() *SpotNftTakerOrder {
	if x, ok := x.GetValue().(*ZksyncAction1_NftTakerOrder); ok {
		return x.NftTakerOrder
	}
	return nil
}

func (x *ZksyncAction1) GetNftOrder2() *SpotNftOrder {
	if x, ok := x.GetValue().(*ZksyncAction1_NftOrder2); ok {
		return x.NftOrder2
	}
	return nil
}

func (x *ZksyncAction1) GetNftTakerOrder2() *SpotNftTakerOrder {
	if x, ok := x.GetValue().(*ZksyncAction1_NftTakerOrder2); ok {
		return x.NftTakerOrder2
	}
	return nil
}

func (x *ZksyncAction1) GetAssetLimitOrder() *AssetLimitOrder {
	if x, ok := x.GetValue().(*ZksyncAction1_AssetLimitOrder); ok {
		return x.AssetLimitOrder
	}
	return nil
}

type isZksyncAction1_Value interface {
	isZksyncAction1_Value()
}

type ZksyncAction1_Withdraw struct {
	// zk
	Withdraw *types.ZkWithdraw `protobuf:"bytes,2,opt,name=withdraw,proto3,oneof"`
}

type ZksyncAction1_ContractToTree struct {
	ContractToTree *types.ZkContractToTree `protobuf:"bytes,3,opt,name=contractToTree,proto3,oneof"`
}

type ZksyncAction1_TreeToContract struct {
	TreeToContract *types.ZkTreeToContract `protobuf:"bytes,4,opt,name=treeToContract,proto3,oneof"`
}

type ZksyncAction1_Transfer struct {
	Transfer *types.ZkTransfer `protobuf:"bytes,5,opt,name=transfer,proto3,oneof"`
}

type ZksyncAction1_TransferToNew struct {
	TransferToNew *types.ZkTransferToNew `protobuf:"bytes,6,opt,name=transferToNew,proto3,oneof"`
}

type ZksyncAction1_ForceExit struct {
	ForceExit *types.ZkForceExit `protobuf:"bytes,7,opt,name=forceExit,proto3,oneof"`
}

type ZksyncAction1_SetPubKey struct {
	SetPubKey *types.ZkSetPubKey `protobuf:"bytes,8,opt,name=setPubKey,proto3,oneof"`
}

type ZksyncAction1_FullExit struct {
	FullExit *types.ZkFullExit `protobuf:"bytes,9,opt,name=fullExit,proto3,oneof"`
}

type ZksyncAction1_Swap struct {
	Swap *types.ZkSwap `protobuf:"bytes,10,opt,name=swap,proto3,oneof"`
}

type ZksyncAction1_SetVerifyKey struct {
	SetVerifyKey *types.ZkVerifyKey `protobuf:"bytes,102,opt,name=setVerifyKey,proto3,oneof"`
}

type ZksyncAction1_CommitProof struct {
	CommitProof *types.ZkCommitProof `protobuf:"bytes,103,opt,name=commitProof,proto3,oneof"`
}

type ZksyncAction1_SetVerifier struct {
	SetVerifier *types.ZkVerifier `protobuf:"bytes,104,opt,name=setVerifier,proto3,oneof"`
}

type ZksyncAction1_Deposit struct {
	Deposit *types.ZkDeposit `protobuf:"bytes,199,opt,name=deposit,proto3,oneof"`
}

type ZksyncAction1_SetFee struct {
	SetFee *types.ZkSetFee `protobuf:"bytes,14,opt,name=setFee,proto3,oneof"`
}

type ZksyncAction1_MintNFT struct {
	MintNFT *types.ZkMintNFT `protobuf:"bytes,16,opt,name=mintNFT,proto3,oneof"`
}

type ZksyncAction1_WithdrawNFT struct {
	WithdrawNFT *types.ZkWithdrawNFT `protobuf:"bytes,17,opt,name=withdrawNFT,proto3,oneof"`
}

type ZksyncAction1_TransferNFT struct {
	TransferNFT *types.ZkTransferNFT `protobuf:"bytes,18,opt,name=transferNFT,proto3,oneof"`
}

type ZksyncAction1_LimitOrder struct {
	// spot
	LimitOrder *SpotLimitOrder `protobuf:"bytes,201,opt,name=limitOrder,proto3,oneof"`
}

type ZksyncAction1_MarketOrder struct {
	MarketOrder *SpotMarketOrder `protobuf:"bytes,202,opt,name=marketOrder,proto3,oneof"`
}

type ZksyncAction1_RevokeOrder struct {
	RevokeOrder *SpotRevokeOrder `protobuf:"bytes,203,opt,name=revokeOrder,proto3,oneof"`
}

type ZksyncAction1_ExchangeBind struct {
	ExchangeBind *SpotExchangeBind `protobuf:"bytes,204,opt,name=exchangeBind,proto3,oneof"`
}

type ZksyncAction1_EntrustOrder struct {
	EntrustOrder *SpotEntrustOrder `protobuf:"bytes,205,opt,name=entrustOrder,proto3,oneof"`
}

type ZksyncAction1_EntrustRevokeOrder struct {
	EntrustRevokeOrder *SpotEntrustRevokeOrder `protobuf:"bytes,207,opt,name=entrustRevokeOrder,proto3,oneof"`
}

type ZksyncAction1_NftOrder struct {
	NftOrder *SpotNftOrder `protobuf:"bytes,300,opt,name=nftOrder,proto3,oneof"`
}

type ZksyncAction1_NftTakerOrder struct {
	NftTakerOrder *SpotNftTakerOrder `protobuf:"bytes,301,opt,name=nftTakerOrder,proto3,oneof"`
}

type ZksyncAction1_NftOrder2 struct {
	NftOrder2 *SpotNftOrder `protobuf:"bytes,302,opt,name=nftOrder2,proto3,oneof"`
}

type ZksyncAction1_NftTakerOrder2 struct {
	NftTakerOrder2 *SpotNftTakerOrder `protobuf:"bytes,303,opt,name=nftTakerOrder2,proto3,oneof"`
}

type ZksyncAction1_AssetLimitOrder struct {
	AssetLimitOrder *AssetLimitOrder `protobuf:"bytes,304,opt,name=assetLimitOrder,proto3,oneof"`
}

func (*ZksyncAction1_Withdraw) isZksyncAction1_Value() {}

func (*ZksyncAction1_ContractToTree) isZksyncAction1_Value() {}

func (*ZksyncAction1_TreeToContract) isZksyncAction1_Value() {}

func (*ZksyncAction1_Transfer) isZksyncAction1_Value() {}

func (*ZksyncAction1_TransferToNew) isZksyncAction1_Value() {}

func (*ZksyncAction1_ForceExit) isZksyncAction1_Value() {}

func (*ZksyncAction1_SetPubKey) isZksyncAction1_Value() {}

func (*ZksyncAction1_FullExit) isZksyncAction1_Value() {}

func (*ZksyncAction1_Swap) isZksyncAction1_Value() {}

func (*ZksyncAction1_SetVerifyKey) isZksyncAction1_Value() {}

func (*ZksyncAction1_CommitProof) isZksyncAction1_Value() {}

func (*ZksyncAction1_SetVerifier) isZksyncAction1_Value() {}

func (*ZksyncAction1_Deposit) isZksyncAction1_Value() {}

func (*ZksyncAction1_SetFee) isZksyncAction1_Value() {}

func (*ZksyncAction1_MintNFT) isZksyncAction1_Value() {}

func (*ZksyncAction1_WithdrawNFT) isZksyncAction1_Value() {}

func (*ZksyncAction1_TransferNFT) isZksyncAction1_Value() {}

func (*ZksyncAction1_LimitOrder) isZksyncAction1_Value() {}

func (*ZksyncAction1_MarketOrder) isZksyncAction1_Value() {}

func (*ZksyncAction1_RevokeOrder) isZksyncAction1_Value() {}

func (*ZksyncAction1_ExchangeBind) isZksyncAction1_Value() {}

func (*ZksyncAction1_EntrustOrder) isZksyncAction1_Value() {}

func (*ZksyncAction1_EntrustRevokeOrder) isZksyncAction1_Value() {}

func (*ZksyncAction1_NftOrder) isZksyncAction1_Value() {}

func (*ZksyncAction1_NftTakerOrder) isZksyncAction1_Value() {}

func (*ZksyncAction1_NftOrder2) isZksyncAction1_Value() {}

func (*ZksyncAction1_NftTakerOrder2) isZksyncAction1_Value() {}

func (*ZksyncAction1_AssetLimitOrder) isZksyncAction1_Value() {}

type ZkTransferWithFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId       uint64             `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	AmountOut     string             `protobuf:"bytes,2,opt,name=amountOut,proto3" json:"amountOut,omitempty"`
	FromAccountId uint64             `protobuf:"varint,3,opt,name=fromAccountId,proto3" json:"fromAccountId,omitempty"`
	AmountIn      string             `protobuf:"bytes,4,opt,name=amountIn,proto3" json:"amountIn,omitempty"`
	ToAccountId   uint64             `protobuf:"varint,5,opt,name=toAccountId,proto3" json:"toAccountId,omitempty"`
	Signature     *types.ZkSignature `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkTransferWithFee) Reset() {
	*x = ZkTransferWithFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zkspot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkTransferWithFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkTransferWithFee) ProtoMessage() {}

func (x *ZkTransferWithFee) ProtoReflect() protoreflect.Message {
	mi := &file_zkspot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkTransferWithFee.ProtoReflect.Descriptor instead.
func (*ZkTransferWithFee) Descriptor() ([]byte, []int) {
	return file_zkspot_proto_rawDescGZIP(), []int{1}
}

func (x *ZkTransferWithFee) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkTransferWithFee) GetAmountOut() string {
	if x != nil {
		return x.AmountOut
	}
	return ""
}

func (x *ZkTransferWithFee) GetFromAccountId() uint64 {
	if x != nil {
		return x.FromAccountId
	}
	return 0
}

func (x *ZkTransferWithFee) GetAmountIn() string {
	if x != nil {
		return x.AmountIn
	}
	return ""
}

func (x *ZkTransferWithFee) GetToAccountId() uint64 {
	if x != nil {
		return x.ToAccountId
	}
	return 0
}

func (x *ZkTransferWithFee) GetSignature() *types.ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_zkspot_proto protoreflect.FileDescriptor

var file_zkspot_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x7a, 0x6b, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x0a, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0d, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x7a, 0x6b, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2,
	0x0c, 0x0a, 0x0d, 0x5a, 0x6b, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x31,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x79,
	0x12, 0x2f, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x54,
	0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x5a, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x54, 0x72,
	0x65, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x54, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x5a, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x45, 0x78, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x09,
	0x73, 0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x65, 0x74, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x46, 0x75, 0x6c,
	0x6c, 0x45, 0x78, 0x69, 0x74, 0x48, 0x00, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x45, 0x78, 0x69,
	0x74, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x48, 0x00,
	0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x00, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x2d, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0xc7, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x46, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x65, 0x74, 0x46, 0x65,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x74, 0x46, 0x65, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6d,
	0x69, 0x6e, 0x74, 0x4e, 0x46, 0x54, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x4d, 0x69, 0x6e, 0x74, 0x4e, 0x46, 0x54, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x74, 0x4e, 0x46, 0x54, 0x12, 0x38, 0x0a, 0x0b, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x46, 0x54, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x4e, 0x46, 0x54, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x4e, 0x46, 0x54, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e,
	0x46, 0x54, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x5a, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x46, 0x54, 0x48, 0x00,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x46, 0x54, 0x12, 0x38, 0x0a,
	0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0xc9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x70, 0x6f, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x70, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x50, 0x0a, 0x12, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x12, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x6e, 0x66, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0xac, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x70, 0x6f, 0x74, 0x4e, 0x66, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x6e,
	0x66, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x6e, 0x66, 0x74, 0x54, 0x61,
	0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4e, 0x66, 0x74, 0x54,
	0x61, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x66, 0x74,
	0x54, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x66,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x32, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4e, 0x66, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x66, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x32,
	0x12, 0x43, 0x0a, 0x0e, 0x6e, 0x66, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x32, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x4e, 0x66, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x66, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x32, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0xb0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x11, 0x5a, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x75,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x33, 0x33, 0x63, 0x6e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x64, 0x61, 0x70, 0x70, 0x2f, 0x7a, 0x6b,
	0x73, 0x70, 0x6f, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_zkspot_proto_rawDescOnce sync.Once
	file_zkspot_proto_rawDescData = file_zkspot_proto_rawDesc
)

func file_zkspot_proto_rawDescGZIP() []byte {
	file_zkspot_proto_rawDescOnce.Do(func() {
		file_zkspot_proto_rawDescData = protoimpl.X.CompressGZIP(file_zkspot_proto_rawDescData)
	})
	return file_zkspot_proto_rawDescData
}

var file_zkspot_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_zkspot_proto_goTypes = []interface{}{
	(*ZksyncAction1)(nil),          // 0: types.ZksyncAction1
	(*ZkTransferWithFee)(nil),      // 1: types.ZkTransferWithFee
	(*types.ZkWithdraw)(nil),       // 2: types.ZkWithdraw
	(*types.ZkContractToTree)(nil), // 3: types.ZkContractToTree
	(*types.ZkTreeToContract)(nil), // 4: types.ZkTreeToContract
	(*types.ZkTransfer)(nil),       // 5: types.ZkTransfer
	(*types.ZkTransferToNew)(nil),  // 6: types.ZkTransferToNew
	(*types.ZkForceExit)(nil),      // 7: types.ZkForceExit
	(*types.ZkSetPubKey)(nil),      // 8: types.ZkSetPubKey
	(*types.ZkFullExit)(nil),       // 9: types.ZkFullExit
	(*types.ZkSwap)(nil),           // 10: types.ZkSwap
	(*types.ZkVerifyKey)(nil),      // 11: types.ZkVerifyKey
	(*types.ZkCommitProof)(nil),    // 12: types.ZkCommitProof
	(*types.ZkVerifier)(nil),       // 13: types.ZkVerifier
	(*types.ZkDeposit)(nil),        // 14: types.ZkDeposit
	(*types.ZkSetFee)(nil),         // 15: types.ZkSetFee
	(*types.ZkMintNFT)(nil),        // 16: types.ZkMintNFT
	(*types.ZkWithdrawNFT)(nil),    // 17: types.ZkWithdrawNFT
	(*types.ZkTransferNFT)(nil),    // 18: types.ZkTransferNFT
	(*SpotLimitOrder)(nil),         // 19: types.SpotLimitOrder
	(*SpotMarketOrder)(nil),        // 20: types.SpotMarketOrder
	(*SpotRevokeOrder)(nil),        // 21: types.SpotRevokeOrder
	(*SpotExchangeBind)(nil),       // 22: types.SpotExchangeBind
	(*SpotEntrustOrder)(nil),       // 23: types.SpotEntrustOrder
	(*SpotEntrustRevokeOrder)(nil), // 24: types.SpotEntrustRevokeOrder
	(*SpotNftOrder)(nil),           // 25: types.SpotNftOrder
	(*SpotNftTakerOrder)(nil),      // 26: types.SpotNftTakerOrder
	(*AssetLimitOrder)(nil),        // 27: types.AssetLimitOrder
	(*types.ZkSignature)(nil),      // 28: types.ZkSignature
}
var file_zkspot_proto_depIdxs = []int32{
	2,  // 0: types.ZksyncAction1.withdraw:type_name -> types.ZkWithdraw
	3,  // 1: types.ZksyncAction1.contractToTree:type_name -> types.ZkContractToTree
	4,  // 2: types.ZksyncAction1.treeToContract:type_name -> types.ZkTreeToContract
	5,  // 3: types.ZksyncAction1.transfer:type_name -> types.ZkTransfer
	6,  // 4: types.ZksyncAction1.transferToNew:type_name -> types.ZkTransferToNew
	7,  // 5: types.ZksyncAction1.forceExit:type_name -> types.ZkForceExit
	8,  // 6: types.ZksyncAction1.setPubKey:type_name -> types.ZkSetPubKey
	9,  // 7: types.ZksyncAction1.fullExit:type_name -> types.ZkFullExit
	10, // 8: types.ZksyncAction1.swap:type_name -> types.ZkSwap
	11, // 9: types.ZksyncAction1.setVerifyKey:type_name -> types.ZkVerifyKey
	12, // 10: types.ZksyncAction1.commitProof:type_name -> types.ZkCommitProof
	13, // 11: types.ZksyncAction1.setVerifier:type_name -> types.ZkVerifier
	14, // 12: types.ZksyncAction1.deposit:type_name -> types.ZkDeposit
	15, // 13: types.ZksyncAction1.setFee:type_name -> types.ZkSetFee
	16, // 14: types.ZksyncAction1.mintNFT:type_name -> types.ZkMintNFT
	17, // 15: types.ZksyncAction1.withdrawNFT:type_name -> types.ZkWithdrawNFT
	18, // 16: types.ZksyncAction1.transferNFT:type_name -> types.ZkTransferNFT
	19, // 17: types.ZksyncAction1.limitOrder:type_name -> types.SpotLimitOrder
	20, // 18: types.ZksyncAction1.marketOrder:type_name -> types.SpotMarketOrder
	21, // 19: types.ZksyncAction1.revokeOrder:type_name -> types.SpotRevokeOrder
	22, // 20: types.ZksyncAction1.exchangeBind:type_name -> types.SpotExchangeBind
	23, // 21: types.ZksyncAction1.entrustOrder:type_name -> types.SpotEntrustOrder
	24, // 22: types.ZksyncAction1.entrustRevokeOrder:type_name -> types.SpotEntrustRevokeOrder
	25, // 23: types.ZksyncAction1.nftOrder:type_name -> types.SpotNftOrder
	26, // 24: types.ZksyncAction1.nftTakerOrder:type_name -> types.SpotNftTakerOrder
	25, // 25: types.ZksyncAction1.nftOrder2:type_name -> types.SpotNftOrder
	26, // 26: types.ZksyncAction1.nftTakerOrder2:type_name -> types.SpotNftTakerOrder
	27, // 27: types.ZksyncAction1.assetLimitOrder:type_name -> types.AssetLimitOrder
	28, // 28: types.ZkTransferWithFee.signature:type_name -> types.ZkSignature
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_zkspot_proto_init() }
func file_zkspot_proto_init() {
	if File_zkspot_proto != nil {
		return
	}
	file_spot_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zkspot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZksyncAction1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zkspot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkTransferWithFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zkspot_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ZksyncAction1_Withdraw)(nil),
		(*ZksyncAction1_ContractToTree)(nil),
		(*ZksyncAction1_TreeToContract)(nil),
		(*ZksyncAction1_Transfer)(nil),
		(*ZksyncAction1_TransferToNew)(nil),
		(*ZksyncAction1_ForceExit)(nil),
		(*ZksyncAction1_SetPubKey)(nil),
		(*ZksyncAction1_FullExit)(nil),
		(*ZksyncAction1_Swap)(nil),
		(*ZksyncAction1_SetVerifyKey)(nil),
		(*ZksyncAction1_CommitProof)(nil),
		(*ZksyncAction1_SetVerifier)(nil),
		(*ZksyncAction1_Deposit)(nil),
		(*ZksyncAction1_SetFee)(nil),
		(*ZksyncAction1_MintNFT)(nil),
		(*ZksyncAction1_WithdrawNFT)(nil),
		(*ZksyncAction1_TransferNFT)(nil),
		(*ZksyncAction1_LimitOrder)(nil),
		(*ZksyncAction1_MarketOrder)(nil),
		(*ZksyncAction1_RevokeOrder)(nil),
		(*ZksyncAction1_ExchangeBind)(nil),
		(*ZksyncAction1_EntrustOrder)(nil),
		(*ZksyncAction1_EntrustRevokeOrder)(nil),
		(*ZksyncAction1_NftOrder)(nil),
		(*ZksyncAction1_NftTakerOrder)(nil),
		(*ZksyncAction1_NftOrder2)(nil),
		(*ZksyncAction1_NftTakerOrder2)(nil),
		(*ZksyncAction1_AssetLimitOrder)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zkspot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zkspot_proto_goTypes,
		DependencyIndexes: file_zkspot_proto_depIdxs,
		MessageInfos:      file_zkspot_proto_msgTypes,
	}.Build()
	File_zkspot_proto = out.File
	file_zkspot_proto_rawDesc = nil
	file_zkspot_proto_goTypes = nil
	file_zkspot_proto_depIdxs = nil
}
